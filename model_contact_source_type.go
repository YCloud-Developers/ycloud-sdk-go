/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"encoding/json"
	"fmt"
)

// ContactSourceType 联系人来源类型的枚举值。此为内部类型标识，非页面显示名称。 每个枚举值对应的显示名称如下： - WHATSAPP: \"Inbound message\" - GROWTH_TOOL: \"Link/QR Code\" - MANUALLY_ADDED: \"Manually added\" - FILE_IMPORT: \"File import\" - SHOPIFY: \"Shopify\" - API: \"API added\" - AD: \"AD\" - POST: \"Post\" - CALLING: \"Calling\" - SMB: \"Whatsapp Business App\" - UNKNOWN: \"Unknown\"
type ContactSourceType string

// List of ContactSourceType
const (
	CONTACTSOURCETYPE_WHATSAPP ContactSourceType = "WHATSAPP"
	CONTACTSOURCETYPE_GROWTH_TOOL ContactSourceType = "GROWTH_TOOL"
	CONTACTSOURCETYPE_MANUALLY_ADDED ContactSourceType = "MANUALLY_ADDED"
	CONTACTSOURCETYPE_FILE_IMPORT ContactSourceType = "FILE_IMPORT"
	CONTACTSOURCETYPE_SHOPIFY ContactSourceType = "SHOPIFY"
	CONTACTSOURCETYPE_API ContactSourceType = "API"
	CONTACTSOURCETYPE_AD ContactSourceType = "AD"
	CONTACTSOURCETYPE_POST ContactSourceType = "POST"
	CONTACTSOURCETYPE_CALLING ContactSourceType = "CALLING"
	CONTACTSOURCETYPE_SMB ContactSourceType = "SMB"
	CONTACTSOURCETYPE_UNKNOWN ContactSourceType = "UNKNOWN"
)

// All allowed values of ContactSourceType enum
var AllowedContactSourceTypeEnumValues = []ContactSourceType{
	"WHATSAPP",
	"GROWTH_TOOL",
	"MANUALLY_ADDED",
	"FILE_IMPORT",
	"SHOPIFY",
	"API",
	"AD",
	"POST",
	"CALLING",
	"SMB",
	"UNKNOWN",
}

func (v *ContactSourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContactSourceType(value)
	*v = enumTypeValue
	return nil
}

// NewContactSourceTypeFromValue returns a pointer to a valid ContactSourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContactSourceTypeFromValue(v string) (*ContactSourceType, error) {
	ev := ContactSourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContactSourceType: valid values are %v", v, AllowedContactSourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContactSourceType) IsValid() bool {
	for _, existing := range AllowedContactSourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ContactSourceType value
func (v ContactSourceType) Ptr() *ContactSourceType {
	return &v
}

type NullableContactSourceType struct {
	value *ContactSourceType
	isSet bool
}

func (v NullableContactSourceType) Get() *ContactSourceType {
	return v.value
}

func (v *NullableContactSourceType) Set(val *ContactSourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableContactSourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableContactSourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactSourceType(val *ContactSourceType) *NullableContactSourceType {
	return &NullableContactSourceType{value: val, isSet: true}
}

func (v NullableContactSourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactSourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

