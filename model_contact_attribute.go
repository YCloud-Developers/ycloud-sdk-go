/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"encoding/json"
)

// ContactAttribute Represents a contact attribute configuration. Contains information about the attribute's metadata and available values.
type ContactAttribute struct {
	// Unique identifier for the contact attribute.
	Id string `json:"id"`
	// Display name of the contact attribute.
	Name string `json:"name"`
	// Key name used to reference this attribute.
	Key string `json:"key"`
	// Data type of the contact attribute.
	Type string `json:"type"`
	// Description of the contact attribute.
	Desc *string `json:"desc,omitempty"`
	// Array of possible values for this attribute. Only present when type is \"ARRAY\".
	Values []string `json:"values,omitempty"`
}

// NewContactAttribute instantiates a new ContactAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactAttribute(id string, name string, key string, type_ string) *ContactAttribute {
	this := ContactAttribute{}
	this.Id = id
	this.Name = name
	this.Key = key
	this.Type = type_
	return &this
}

// NewContactAttributeWithDefaults instantiates a new ContactAttribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactAttributeWithDefaults() *ContactAttribute {
	this := ContactAttribute{}
	return &this
}

// GetId returns the Id field value
func (o *ContactAttribute) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ContactAttribute) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ContactAttribute) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ContactAttribute) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ContactAttribute) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ContactAttribute) SetName(v string) {
	o.Name = v
}

// GetKey returns the Key field value
func (o *ContactAttribute) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *ContactAttribute) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *ContactAttribute) SetKey(v string) {
	o.Key = v
}

// GetType returns the Type field value
func (o *ContactAttribute) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ContactAttribute) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ContactAttribute) SetType(v string) {
	o.Type = v
}

// GetDesc returns the Desc field value if set, zero value otherwise.
func (o *ContactAttribute) GetDesc() string {
	if o == nil || o.Desc == nil {
		var ret string
		return ret
	}
	return *o.Desc
}

// GetDescOk returns a tuple with the Desc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactAttribute) GetDescOk() (*string, bool) {
	if o == nil || o.Desc == nil {
		return nil, false
	}
	return o.Desc, true
}

// HasDesc returns a boolean if a field has been set.
func (o *ContactAttribute) HasDesc() bool {
	if o != nil && o.Desc != nil {
		return true
	}

	return false
}

// SetDesc gets a reference to the given string and assigns it to the Desc field.
func (o *ContactAttribute) SetDesc(v string) {
	o.Desc = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *ContactAttribute) GetValues() []string {
	if o == nil || o.Values == nil {
		var ret []string
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactAttribute) GetValuesOk() ([]string, bool) {
	if o == nil || o.Values == nil {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *ContactAttribute) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *ContactAttribute) SetValues(v []string) {
	o.Values = v
}

func (o ContactAttribute) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["key"] = o.Key
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Desc != nil {
		toSerialize["desc"] = o.Desc
	}
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	return json.Marshal(toSerialize)
}

type NullableContactAttribute struct {
	value *ContactAttribute
	isSet bool
}

func (v NullableContactAttribute) Get() *ContactAttribute {
	return v.value
}

func (v *NullableContactAttribute) Set(val *ContactAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableContactAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableContactAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactAttribute(val *ContactAttribute) *NullableContactAttribute {
	return &NullableContactAttribute{value: val, isSet: true}
}

func (v NullableContactAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


