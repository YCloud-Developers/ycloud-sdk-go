/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"encoding/json"
	"time"
)

// Unsubscriber An unsubscriber is a configuration item representing that customers opt out of receiving messages from your business. **A customer and a channel form a unique identifier for an unsubscriber.**
type Unsubscriber struct {
	Type *UnsubscriberType `json:"type,omitempty"`
	// The customer who has opted out. For `type=PHONE_NUMBER`, it should be a phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format.
	Customer *string `json:"customer,omitempty"`
	Channel *UnsubscriberChannel `json:"channel,omitempty"`
	// The customer's region code, formatted in [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	RegionCode *string `json:"regionCode,omitempty"`
	// The time at which this object was created, formatted in [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339). e.g., `2022-06-01T12:00:00.000Z`.
	CreateTime *time.Time `json:"createTime,omitempty"`
}

// NewUnsubscriber instantiates a new Unsubscriber object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnsubscriber() *Unsubscriber {
	this := Unsubscriber{}
	return &this
}

// NewUnsubscriberWithDefaults instantiates a new Unsubscriber object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnsubscriberWithDefaults() *Unsubscriber {
	this := Unsubscriber{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Unsubscriber) GetType() UnsubscriberType {
	if o == nil || o.Type == nil {
		var ret UnsubscriberType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Unsubscriber) GetTypeOk() (*UnsubscriberType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Unsubscriber) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given UnsubscriberType and assigns it to the Type field.
func (o *Unsubscriber) SetType(v UnsubscriberType) {
	o.Type = &v
}

// GetCustomer returns the Customer field value if set, zero value otherwise.
func (o *Unsubscriber) GetCustomer() string {
	if o == nil || o.Customer == nil {
		var ret string
		return ret
	}
	return *o.Customer
}

// GetCustomerOk returns a tuple with the Customer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Unsubscriber) GetCustomerOk() (*string, bool) {
	if o == nil || o.Customer == nil {
		return nil, false
	}
	return o.Customer, true
}

// HasCustomer returns a boolean if a field has been set.
func (o *Unsubscriber) HasCustomer() bool {
	if o != nil && o.Customer != nil {
		return true
	}

	return false
}

// SetCustomer gets a reference to the given string and assigns it to the Customer field.
func (o *Unsubscriber) SetCustomer(v string) {
	o.Customer = &v
}

// GetChannel returns the Channel field value if set, zero value otherwise.
func (o *Unsubscriber) GetChannel() UnsubscriberChannel {
	if o == nil || o.Channel == nil {
		var ret UnsubscriberChannel
		return ret
	}
	return *o.Channel
}

// GetChannelOk returns a tuple with the Channel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Unsubscriber) GetChannelOk() (*UnsubscriberChannel, bool) {
	if o == nil || o.Channel == nil {
		return nil, false
	}
	return o.Channel, true
}

// HasChannel returns a boolean if a field has been set.
func (o *Unsubscriber) HasChannel() bool {
	if o != nil && o.Channel != nil {
		return true
	}

	return false
}

// SetChannel gets a reference to the given UnsubscriberChannel and assigns it to the Channel field.
func (o *Unsubscriber) SetChannel(v UnsubscriberChannel) {
	o.Channel = &v
}

// GetRegionCode returns the RegionCode field value if set, zero value otherwise.
func (o *Unsubscriber) GetRegionCode() string {
	if o == nil || o.RegionCode == nil {
		var ret string
		return ret
	}
	return *o.RegionCode
}

// GetRegionCodeOk returns a tuple with the RegionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Unsubscriber) GetRegionCodeOk() (*string, bool) {
	if o == nil || o.RegionCode == nil {
		return nil, false
	}
	return o.RegionCode, true
}

// HasRegionCode returns a boolean if a field has been set.
func (o *Unsubscriber) HasRegionCode() bool {
	if o != nil && o.RegionCode != nil {
		return true
	}

	return false
}

// SetRegionCode gets a reference to the given string and assigns it to the RegionCode field.
func (o *Unsubscriber) SetRegionCode(v string) {
	o.RegionCode = &v
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise.
func (o *Unsubscriber) GetCreateTime() time.Time {
	if o == nil || o.CreateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Unsubscriber) GetCreateTimeOk() (*time.Time, bool) {
	if o == nil || o.CreateTime == nil {
		return nil, false
	}
	return o.CreateTime, true
}

// HasCreateTime returns a boolean if a field has been set.
func (o *Unsubscriber) HasCreateTime() bool {
	if o != nil && o.CreateTime != nil {
		return true
	}

	return false
}

// SetCreateTime gets a reference to the given time.Time and assigns it to the CreateTime field.
func (o *Unsubscriber) SetCreateTime(v time.Time) {
	o.CreateTime = &v
}

func (o Unsubscriber) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Customer != nil {
		toSerialize["customer"] = o.Customer
	}
	if o.Channel != nil {
		toSerialize["channel"] = o.Channel
	}
	if o.RegionCode != nil {
		toSerialize["regionCode"] = o.RegionCode
	}
	if o.CreateTime != nil {
		toSerialize["createTime"] = o.CreateTime
	}
	return json.Marshal(toSerialize)
}

type NullableUnsubscriber struct {
	value *Unsubscriber
	isSet bool
}

func (v NullableUnsubscriber) Get() *Unsubscriber {
	return v.value
}

func (v *NullableUnsubscriber) Set(val *Unsubscriber) {
	v.value = val
	v.isSet = true
}

func (v NullableUnsubscriber) IsSet() bool {
	return v.isSet
}

func (v *NullableUnsubscriber) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnsubscriber(val *Unsubscriber) *NullableUnsubscriber {
	return &NullableUnsubscriber{value: val, isSet: true}
}

func (v NullableUnsubscriber) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnsubscriber) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


