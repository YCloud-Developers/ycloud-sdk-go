/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"encoding/json"
)

// AttributeChangeAction Represents a single change action performed on an attribute. For tag attributes, includes additional id and value fields.
type AttributeChangeAction struct {
	// The type of change action performed.
	Action string `json:"action"`
	// The ID of the item when the attribute is 'tags'.  This field is only present for tag-related changes.
	Id *string `json:"id,omitempty"`
	// The value of the item when the attribute is 'tags'.  This field is only present for tag-related changes.
	Value *string `json:"value,omitempty"`
}

// NewAttributeChangeAction instantiates a new AttributeChangeAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttributeChangeAction(action string) *AttributeChangeAction {
	this := AttributeChangeAction{}
	this.Action = action
	return &this
}

// NewAttributeChangeActionWithDefaults instantiates a new AttributeChangeAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttributeChangeActionWithDefaults() *AttributeChangeAction {
	this := AttributeChangeAction{}
	return &this
}

// GetAction returns the Action field value
func (o *AttributeChangeAction) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *AttributeChangeAction) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *AttributeChangeAction) SetAction(v string) {
	o.Action = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AttributeChangeAction) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeChangeAction) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AttributeChangeAction) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AttributeChangeAction) SetId(v string) {
	o.Id = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *AttributeChangeAction) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeChangeAction) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *AttributeChangeAction) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *AttributeChangeAction) SetValue(v string) {
	o.Value = &v
}

func (o AttributeChangeAction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["action"] = o.Action
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableAttributeChangeAction struct {
	value *AttributeChangeAction
	isSet bool
}

func (v NullableAttributeChangeAction) Get() *AttributeChangeAction {
	return v.value
}

func (v *NullableAttributeChangeAction) Set(val *AttributeChangeAction) {
	v.value = val
	v.isSet = true
}

func (v NullableAttributeChangeAction) IsSet() bool {
	return v.isSet
}

func (v *NullableAttributeChangeAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttributeChangeAction(val *AttributeChangeAction) *NullableAttributeChangeAction {
	return &NullableAttributeChangeAction{value: val, isSet: true}
}

func (v NullableAttributeChangeAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttributeChangeAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


