/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"encoding/json"
	"time"
)

// ContactAttributesChanged Represents a contact attributes changed event. Contains information about which contact attributes were modified and their old/new values.
type ContactAttributesChanged struct {
	// The ID of the contact whose attributes were changed.
	Id string `json:"id"`
	// The time at which the contact attributes were updated, formatted in [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339). e.g., `2022-06-01T12:00:00.000Z`.
	UpdateTime time.Time `json:"updateTime"`
	// An object containing the changed attributes. Each key represents the name of the changed attribute, and the value contains the old value, new value, and change actions.
	ChangedAttributes map[string]ContactAttributeChange `json:"changedAttributes"`
}

// NewContactAttributesChanged instantiates a new ContactAttributesChanged object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactAttributesChanged(id string, updateTime time.Time, changedAttributes map[string]ContactAttributeChange) *ContactAttributesChanged {
	this := ContactAttributesChanged{}
	this.Id = id
	this.UpdateTime = updateTime
	this.ChangedAttributes = changedAttributes
	return &this
}

// NewContactAttributesChangedWithDefaults instantiates a new ContactAttributesChanged object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactAttributesChangedWithDefaults() *ContactAttributesChanged {
	this := ContactAttributesChanged{}
	return &this
}

// GetId returns the Id field value
func (o *ContactAttributesChanged) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ContactAttributesChanged) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ContactAttributesChanged) SetId(v string) {
	o.Id = v
}

// GetUpdateTime returns the UpdateTime field value
func (o *ContactAttributesChanged) GetUpdateTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value
// and a boolean to check if the value has been set.
func (o *ContactAttributesChanged) GetUpdateTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdateTime, true
}

// SetUpdateTime sets field value
func (o *ContactAttributesChanged) SetUpdateTime(v time.Time) {
	o.UpdateTime = v
}

// GetChangedAttributes returns the ChangedAttributes field value
func (o *ContactAttributesChanged) GetChangedAttributes() map[string]ContactAttributeChange {
	if o == nil {
		var ret map[string]ContactAttributeChange
		return ret
	}

	return o.ChangedAttributes
}

// GetChangedAttributesOk returns a tuple with the ChangedAttributes field value
// and a boolean to check if the value has been set.
func (o *ContactAttributesChanged) GetChangedAttributesOk() (*map[string]ContactAttributeChange, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChangedAttributes, true
}

// SetChangedAttributes sets field value
func (o *ContactAttributesChanged) SetChangedAttributes(v map[string]ContactAttributeChange) {
	o.ChangedAttributes = v
}

func (o ContactAttributesChanged) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["updateTime"] = o.UpdateTime
	}
	if true {
		toSerialize["changedAttributes"] = o.ChangedAttributes
	}
	return json.Marshal(toSerialize)
}

type NullableContactAttributesChanged struct {
	value *ContactAttributesChanged
	isSet bool
}

func (v NullableContactAttributesChanged) Get() *ContactAttributesChanged {
	return v.value
}

func (v *NullableContactAttributesChanged) Set(val *ContactAttributesChanged) {
	v.value = val
	v.isSet = true
}

func (v NullableContactAttributesChanged) IsSet() bool {
	return v.isSet
}

func (v *NullableContactAttributesChanged) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactAttributesChanged(val *ContactAttributesChanged) *NullableContactAttributesChanged {
	return &NullableContactAttributesChanged{value: val, isSet: true}
}

func (v NullableContactAttributesChanged) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactAttributesChanged) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


