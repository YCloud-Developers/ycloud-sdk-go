/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"encoding/json"
	"time"
)

// ContactDeleted Represents a contact deleted event. Contains the contact information that was deleted.
type ContactDeleted struct {
	// Contact ID
	Id string `json:"id"`
	// Contact's nickname.
	NickName *string `json:"nickName,omitempty"`
	// Unique Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format.
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	// The time at which the contact was last updated, formatted in [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339). e.g., `2022-06-01T12:00:00.000Z`.
	UpdateTime *time.Time `json:"updateTime,omitempty"`
}

// NewContactDeleted instantiates a new ContactDeleted object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactDeleted(id string) *ContactDeleted {
	this := ContactDeleted{}
	this.Id = id
	return &this
}

// NewContactDeletedWithDefaults instantiates a new ContactDeleted object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactDeletedWithDefaults() *ContactDeleted {
	this := ContactDeleted{}
	return &this
}

// GetId returns the Id field value
func (o *ContactDeleted) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ContactDeleted) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ContactDeleted) SetId(v string) {
	o.Id = v
}

// GetNickName returns the NickName field value if set, zero value otherwise.
func (o *ContactDeleted) GetNickName() string {
	if o == nil || o.NickName == nil {
		var ret string
		return ret
	}
	return *o.NickName
}

// GetNickNameOk returns a tuple with the NickName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactDeleted) GetNickNameOk() (*string, bool) {
	if o == nil || o.NickName == nil {
		return nil, false
	}
	return o.NickName, true
}

// HasNickName returns a boolean if a field has been set.
func (o *ContactDeleted) HasNickName() bool {
	if o != nil && o.NickName != nil {
		return true
	}

	return false
}

// SetNickName gets a reference to the given string and assigns it to the NickName field.
func (o *ContactDeleted) SetNickName(v string) {
	o.NickName = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *ContactDeleted) GetPhoneNumber() string {
	if o == nil || o.PhoneNumber == nil {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactDeleted) GetPhoneNumberOk() (*string, bool) {
	if o == nil || o.PhoneNumber == nil {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *ContactDeleted) HasPhoneNumber() bool {
	if o != nil && o.PhoneNumber != nil {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *ContactDeleted) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *ContactDeleted) GetUpdateTime() time.Time {
	if o == nil || o.UpdateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactDeleted) GetUpdateTimeOk() (*time.Time, bool) {
	if o == nil || o.UpdateTime == nil {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *ContactDeleted) HasUpdateTime() bool {
	if o != nil && o.UpdateTime != nil {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given time.Time and assigns it to the UpdateTime field.
func (o *ContactDeleted) SetUpdateTime(v time.Time) {
	o.UpdateTime = &v
}

func (o ContactDeleted) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.NickName != nil {
		toSerialize["nickName"] = o.NickName
	}
	if o.PhoneNumber != nil {
		toSerialize["phoneNumber"] = o.PhoneNumber
	}
	if o.UpdateTime != nil {
		toSerialize["updateTime"] = o.UpdateTime
	}
	return json.Marshal(toSerialize)
}

type NullableContactDeleted struct {
	value *ContactDeleted
	isSet bool
}

func (v NullableContactDeleted) Get() *ContactDeleted {
	return v.value
}

func (v *NullableContactDeleted) Set(val *ContactDeleted) {
	v.value = val
	v.isSet = true
}

func (v NullableContactDeleted) IsSet() bool {
	return v.isSet
}

func (v *NullableContactDeleted) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactDeleted(val *ContactDeleted) *NullableContactDeleted {
	return &NullableContactDeleted{value: val, isSet: true}
}

func (v NullableContactDeleted) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactDeleted) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


