/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"encoding/json"
)

// WhatsappMessageText WhatsApp Message Text Object.
type WhatsappMessageText struct {
	// Required for text messages. The text of the text message which can contain URLs which begin with http:// or https:// and formatting. See available formatting options here. If you include URLs in your text and want to include a preview box in text messages (preview_url: true), make sure the URL starts with http:// or https:// â€” https:// URLs are preferred. You must include a hostname, since IP addresses will not be matched. Maximum length: 4096 characters.
	Body string `json:"body"`
	// By default, WhatsApp recognizes URLs and makes them clickable, but you can also include a preview box with more information about the link. Set this field to true if you want to include a URL preview box. The majority of the time, the receiver will see a URL they can click on when you send an URL, set preview_url to true, and provide a body object with a http or https link. URL previews are only rendered after one of the following has happened: - The business has sent a message template to the user. - The user initiates a conversation with a \"click to chat\" link. - The user adds the business phone number to their address book and initiates a conversation. Default: `false`.
	PreviewUrl *bool `json:"preview_url,omitempty"`
}

// NewWhatsappMessageText instantiates a new WhatsappMessageText object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWhatsappMessageText(body string) *WhatsappMessageText {
	this := WhatsappMessageText{}
	this.Body = body
	return &this
}

// NewWhatsappMessageTextWithDefaults instantiates a new WhatsappMessageText object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWhatsappMessageTextWithDefaults() *WhatsappMessageText {
	this := WhatsappMessageText{}
	return &this
}

// GetBody returns the Body field value
func (o *WhatsappMessageText) GetBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Body
}

// GetBodyOk returns a tuple with the Body field value
// and a boolean to check if the value has been set.
func (o *WhatsappMessageText) GetBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Body, true
}

// SetBody sets field value
func (o *WhatsappMessageText) SetBody(v string) {
	o.Body = v
}

// GetPreviewUrl returns the PreviewUrl field value if set, zero value otherwise.
func (o *WhatsappMessageText) GetPreviewUrl() bool {
	if o == nil || o.PreviewUrl == nil {
		var ret bool
		return ret
	}
	return *o.PreviewUrl
}

// GetPreviewUrlOk returns a tuple with the PreviewUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsappMessageText) GetPreviewUrlOk() (*bool, bool) {
	if o == nil || o.PreviewUrl == nil {
		return nil, false
	}
	return o.PreviewUrl, true
}

// HasPreviewUrl returns a boolean if a field has been set.
func (o *WhatsappMessageText) HasPreviewUrl() bool {
	if o != nil && o.PreviewUrl != nil {
		return true
	}

	return false
}

// SetPreviewUrl gets a reference to the given bool and assigns it to the PreviewUrl field.
func (o *WhatsappMessageText) SetPreviewUrl(v bool) {
	o.PreviewUrl = &v
}

func (o WhatsappMessageText) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["body"] = o.Body
	}
	if o.PreviewUrl != nil {
		toSerialize["preview_url"] = o.PreviewUrl
	}
	return json.Marshal(toSerialize)
}

type NullableWhatsappMessageText struct {
	value *WhatsappMessageText
	isSet bool
}

func (v NullableWhatsappMessageText) Get() *WhatsappMessageText {
	return v.value
}

func (v *NullableWhatsappMessageText) Set(val *WhatsappMessageText) {
	v.value = val
	v.isSet = true
}

func (v NullableWhatsappMessageText) IsSet() bool {
	return v.isSet
}

func (v *NullableWhatsappMessageText) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWhatsappMessageText(val *WhatsappMessageText) *NullableWhatsappMessageText {
	return &NullableWhatsappMessageText{value: val, isSet: true}
}

func (v NullableWhatsappMessageText) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWhatsappMessageText) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


