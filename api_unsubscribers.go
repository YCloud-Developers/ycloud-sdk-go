/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// UnsubscribersApiService UnsubscribersApi service
type UnsubscribersApiService service

type UnsubscribersApiCreateRequest struct {
	ctx context.Context
	ApiService *UnsubscribersApiService
	unsubscriberCreateRequest *UnsubscriberCreateRequest
}

func (r UnsubscribersApiCreateRequest) UnsubscriberCreateRequest(unsubscriberCreateRequest UnsubscriberCreateRequest) UnsubscribersApiCreateRequest {
	r.unsubscriberCreateRequest = &unsubscriberCreateRequest
	return r
}

func (r UnsubscribersApiCreateRequest) Execute() (*Unsubscriber, *http.Response, error) {
	return r.ApiService.CreateExecute(r)
}

/*
Create Create an unsubscriber

Creates an unsubscriber.
An unsubscriber is a configuration item representing that customers opt out of receiving messages from your business.
**A customer and a channel form a unique identifier for an unsubscriber.**

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return UnsubscribersApiCreateRequest
*/
func (a *UnsubscribersApiService) Create(ctx context.Context) UnsubscribersApiCreateRequest {
	return UnsubscribersApiCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Unsubscriber
func (a *UnsubscribersApiService) CreateExecute(r UnsubscribersApiCreateRequest) (*Unsubscriber, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Unsubscriber
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UnsubscribersApiService.Create")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/unsubscribers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unsubscriberCreateRequest == nil {
		return localVarReturnValue, nil, reportError("unsubscriberCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unsubscriberCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UnsubscribersApiDeleteByCustomerAndChannelRequest struct {
	ctx context.Context
	ApiService *UnsubscribersApiService
	customer string
	channel UnsubscriberChannel
}

func (r UnsubscribersApiDeleteByCustomerAndChannelRequest) Execute() (*Unsubscriber, *http.Response, error) {
	return r.ApiService.DeleteByCustomerAndChannelExecute(r)
}

/*
DeleteByCustomerAndChannel Delete an unsubscriber

Deletes the unsubscriber for the specified customer and channel.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customer The customer who has opted out.
 @param channel
 @return UnsubscribersApiDeleteByCustomerAndChannelRequest
*/
func (a *UnsubscribersApiService) DeleteByCustomerAndChannel(ctx context.Context, customer string, channel UnsubscriberChannel) UnsubscribersApiDeleteByCustomerAndChannelRequest {
	return UnsubscribersApiDeleteByCustomerAndChannelRequest{
		ApiService: a,
		ctx: ctx,
		customer: customer,
		channel: channel,
	}
}

// Execute executes the request
//  @return Unsubscriber
func (a *UnsubscribersApiService) DeleteByCustomerAndChannelExecute(r UnsubscribersApiDeleteByCustomerAndChannelRequest) (*Unsubscriber, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Unsubscriber
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UnsubscribersApiService.DeleteByCustomerAndChannel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/unsubscribers/{customer}/{channel}"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterToString(r.customer, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"channel"+"}", url.PathEscape(parameterToString(r.channel, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UnsubscribersApiListRequest struct {
	ctx context.Context
	ApiService *UnsubscribersApiService
	page *int32
	limit *int32
	includeTotal *bool
	pageAfter *string
	filterCustomer *string
	filterChannel *UnsubscriberChannel
	filterRegionCode *string
}

// Page number of the results to be returned, 1-based.
func (r UnsubscribersApiListRequest) Page(page int32) UnsubscribersApiListRequest {
	r.page = &page
	return r
}

// A limit on the number of results to be returned, or number of results per page, between 1 and 100, defaults to 10.
func (r UnsubscribersApiListRequest) Limit(limit int32) UnsubscribersApiListRequest {
	r.limit = &limit
	return r
}

// Return results inside an object that contains the total result count or not.
func (r UnsubscribersApiListRequest) IncludeTotal(includeTotal bool) UnsubscribersApiListRequest {
	r.includeTotal = &includeTotal
	return r
}

// A cursor to fetch the next page in cursor pagination. For example, if you make a list request, receive 100 objects and &#x60;cursor.after&#x3D;id:foo&#x60;, your subsequent call can include &#x60;pageAfter&#x3D;id:foo&#x60; in order to fetch the next page of the list.
func (r UnsubscribersApiListRequest) PageAfter(pageAfter string) UnsubscribersApiListRequest {
	r.pageAfter = &pageAfter
	return r
}

func (r UnsubscribersApiListRequest) FilterCustomer(filterCustomer string) UnsubscribersApiListRequest {
	r.filterCustomer = &filterCustomer
	return r
}

func (r UnsubscribersApiListRequest) FilterChannel(filterChannel UnsubscriberChannel) UnsubscribersApiListRequest {
	r.filterChannel = &filterChannel
	return r
}

func (r UnsubscribersApiListRequest) FilterRegionCode(filterRegionCode string) UnsubscribersApiListRequest {
	r.filterRegionCode = &filterRegionCode
	return r
}

func (r UnsubscribersApiListRequest) Execute() (*UnsubscriberPage, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List List unsubscribers

Returns a paginated list of unsubscribers.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return UnsubscribersApiListRequest
*/
func (a *UnsubscribersApiService) List(ctx context.Context) UnsubscribersApiListRequest {
	return UnsubscribersApiListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UnsubscriberPage
func (a *UnsubscribersApiService) ListExecute(r UnsubscribersApiListRequest) (*UnsubscriberPage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UnsubscriberPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UnsubscribersApiService.List")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/unsubscribers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.includeTotal != nil {
		localVarQueryParams.Add("includeTotal", parameterToString(*r.includeTotal, ""))
	}
	if r.pageAfter != nil {
		localVarQueryParams.Add("pageAfter", parameterToString(*r.pageAfter, ""))
	}
	if r.filterCustomer != nil {
		localVarQueryParams.Add("filter.customer", parameterToString(*r.filterCustomer, ""))
	}
	if r.filterChannel != nil {
		localVarQueryParams.Add("filter.channel", parameterToString(*r.filterChannel, ""))
	}
	if r.filterRegionCode != nil {
		localVarQueryParams.Add("filter.regionCode", parameterToString(*r.filterRegionCode, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UnsubscribersApiListAllByCustomerRequest struct {
	ctx context.Context
	ApiService *UnsubscribersApiService
	customer string
}

func (r UnsubscribersApiListAllByCustomerRequest) Execute() ([]Unsubscriber, *http.Response, error) {
	return r.ApiService.ListAllByCustomerExecute(r)
}

/*
ListAllByCustomer List all unsubscribers by customer

Returns all unsubscribers for the specified customer.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customer The customer who has opted out.
 @return UnsubscribersApiListAllByCustomerRequest
*/
func (a *UnsubscribersApiService) ListAllByCustomer(ctx context.Context, customer string) UnsubscribersApiListAllByCustomerRequest {
	return UnsubscribersApiListAllByCustomerRequest{
		ApiService: a,
		ctx: ctx,
		customer: customer,
	}
}

// Execute executes the request
//  @return []Unsubscriber
func (a *UnsubscribersApiService) ListAllByCustomerExecute(r UnsubscribersApiListAllByCustomerRequest) ([]Unsubscriber, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Unsubscriber
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UnsubscribersApiService.ListAllByCustomer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/unsubscribers/{customer}"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterToString(r.customer, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UnsubscribersApiRetrieveByCustomerAndChannelRequest struct {
	ctx context.Context
	ApiService *UnsubscribersApiService
	customer string
	channel UnsubscriberChannel
}

func (r UnsubscribersApiRetrieveByCustomerAndChannelRequest) Execute() (*Unsubscriber, *http.Response, error) {
	return r.ApiService.RetrieveByCustomerAndChannelExecute(r)
}

/*
RetrieveByCustomerAndChannel Retrieve an unsubscriber

Retrieves the unsubscriber for the specified customer and channel.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customer The customer who has opted out.
 @param channel
 @return UnsubscribersApiRetrieveByCustomerAndChannelRequest
*/
func (a *UnsubscribersApiService) RetrieveByCustomerAndChannel(ctx context.Context, customer string, channel UnsubscriberChannel) UnsubscribersApiRetrieveByCustomerAndChannelRequest {
	return UnsubscribersApiRetrieveByCustomerAndChannelRequest{
		ApiService: a,
		ctx: ctx,
		customer: customer,
		channel: channel,
	}
}

// Execute executes the request
//  @return Unsubscriber
func (a *UnsubscribersApiService) RetrieveByCustomerAndChannelExecute(r UnsubscribersApiRetrieveByCustomerAndChannelRequest) (*Unsubscriber, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Unsubscriber
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UnsubscribersApiService.RetrieveByCustomerAndChannel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/unsubscribers/{customer}/{channel}"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterToString(r.customer, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"channel"+"}", url.PathEscape(parameterToString(r.channel, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
