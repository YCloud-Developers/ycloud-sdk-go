/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"encoding/json"
	"fmt"
)

// WhatsappTemplateComponentButtonType Button type. - `PHONE_NUMBER`: Phone number buttons call the specified business phone number when tapped by the app user. Templates are limited to one phone number button. - `URL`: URL buttons load the specified URL in the device's default web browser when tapped by the app user. Templates are limited to two URL buttons. - `QUICK_REPLY`: Quick reply buttons are custom text-only buttons that immediately message you with the specified text string when tapped by the app user. Templates are limited to 10 quick reply buttons. If using quick reply buttons with other buttons, buttons must be organized into two groups: quick reply buttons and non-quick reply buttons. - `COPY_CODE`: Copy code buttons copy a text string (defined when the template is sent in a template message) to the device's clipboard when tapped by the app user. Templates are limited to one copy code button. - `OTP`: One-time password (OTP) buttons are a special type of URL button component used with authentication templates. - `CATALOG`: When a customer taps the **View catalog** button in a catalog template message, your product catalog appears within WhatsApp. - `MPM`: Customers can browse products and sections by tapping the **View items** button in a multi-product template message. - `FLOW`: Use this type to specify the [Flow](https://developers.facebook.com/docs/whatsapp/flows) to be sent with the template message.
type WhatsappTemplateComponentButtonType string

// List of WhatsappTemplateComponentButtonType
const (
	WHATSAPPTEMPLATECOMPONENTBUTTONTYPE_PHONE_NUMBER WhatsappTemplateComponentButtonType = "PHONE_NUMBER"
	WHATSAPPTEMPLATECOMPONENTBUTTONTYPE_URL          WhatsappTemplateComponentButtonType = "URL"
	WHATSAPPTEMPLATECOMPONENTBUTTONTYPE_QUICK_REPLY  WhatsappTemplateComponentButtonType = "QUICK_REPLY"
	WHATSAPPTEMPLATECOMPONENTBUTTONTYPE_COPY_CODE    WhatsappTemplateComponentButtonType = "COPY_CODE"
	WHATSAPPTEMPLATECOMPONENTBUTTONTYPE_OTP          WhatsappTemplateComponentButtonType = "OTP"
	WHATSAPPTEMPLATECOMPONENTBUTTONTYPE_CATALOG      WhatsappTemplateComponentButtonType = "CATALOG"
	WHATSAPPTEMPLATECOMPONENTBUTTONTYPE_MPM          WhatsappTemplateComponentButtonType = "MPM"
	WHATSAPPTEMPLATECOMPONENTBUTTONTYPE_FLOW         WhatsappTemplateComponentButtonType = "FLOW"
)

// All allowed values of WhatsappTemplateComponentButtonType enum
var AllowedWhatsappTemplateComponentButtonTypeEnumValues = []WhatsappTemplateComponentButtonType{
	"PHONE_NUMBER",
	"URL",
	"QUICK_REPLY",
	"COPY_CODE",
	"OTP",
	"CATALOG",
	"MPM",
	"FLOW",
}

func (v *WhatsappTemplateComponentButtonType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WhatsappTemplateComponentButtonType(value)
	*v = enumTypeValue
	return nil
}

// NewWhatsappTemplateComponentButtonTypeFromValue returns a pointer to a valid WhatsappTemplateComponentButtonType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWhatsappTemplateComponentButtonTypeFromValue(v string) (*WhatsappTemplateComponentButtonType, error) {
	ev := WhatsappTemplateComponentButtonType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WhatsappTemplateComponentButtonType: valid values are %v", v, AllowedWhatsappTemplateComponentButtonTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WhatsappTemplateComponentButtonType) IsValid() bool {
	for _, existing := range AllowedWhatsappTemplateComponentButtonTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WhatsappTemplateComponentButtonType value
func (v WhatsappTemplateComponentButtonType) Ptr() *WhatsappTemplateComponentButtonType {
	return &v
}

type NullableWhatsappTemplateComponentButtonType struct {
	value *WhatsappTemplateComponentButtonType
	isSet bool
}

func (v NullableWhatsappTemplateComponentButtonType) Get() *WhatsappTemplateComponentButtonType {
	return v.value
}

func (v *NullableWhatsappTemplateComponentButtonType) Set(val *WhatsappTemplateComponentButtonType) {
	v.value = val
	v.isSet = true
}

func (v NullableWhatsappTemplateComponentButtonType) IsSet() bool {
	return v.isSet
}

func (v *NullableWhatsappTemplateComponentButtonType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWhatsappTemplateComponentButtonType(val *WhatsappTemplateComponentButtonType) *NullableWhatsappTemplateComponentButtonType {
	return &NullableWhatsappTemplateComponentButtonType{value: val, isSet: true}
}

func (v NullableWhatsappTemplateComponentButtonType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWhatsappTemplateComponentButtonType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
