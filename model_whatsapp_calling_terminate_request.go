/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"encoding/json"
)

// WhatsappCallingTerminateRequest struct for WhatsappCallingTerminateRequest
type WhatsappCallingTerminateRequest struct {
	// The WhatsApp Business phone number ID.
	PhoneId string `json:"phoneId"`
	// The WhatsApp call ID. Required for terminate operations. This ID is received from the Call Connect webhook when a WhatsApp user initiates the call.
	Wacid string `json:"wacid"`
}

// NewWhatsappCallingTerminateRequest instantiates a new WhatsappCallingTerminateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWhatsappCallingTerminateRequest(phoneId string, wacid string) *WhatsappCallingTerminateRequest {
	this := WhatsappCallingTerminateRequest{}
	this.PhoneId = phoneId
	this.Wacid = wacid
	return &this
}

// NewWhatsappCallingTerminateRequestWithDefaults instantiates a new WhatsappCallingTerminateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWhatsappCallingTerminateRequestWithDefaults() *WhatsappCallingTerminateRequest {
	this := WhatsappCallingTerminateRequest{}
	return &this
}

// GetPhoneId returns the PhoneId field value
func (o *WhatsappCallingTerminateRequest) GetPhoneId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PhoneId
}

// GetPhoneIdOk returns a tuple with the PhoneId field value
// and a boolean to check if the value has been set.
func (o *WhatsappCallingTerminateRequest) GetPhoneIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PhoneId, true
}

// SetPhoneId sets field value
func (o *WhatsappCallingTerminateRequest) SetPhoneId(v string) {
	o.PhoneId = v
}

// GetWacid returns the Wacid field value
func (o *WhatsappCallingTerminateRequest) GetWacid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Wacid
}

// GetWacidOk returns a tuple with the Wacid field value
// and a boolean to check if the value has been set.
func (o *WhatsappCallingTerminateRequest) GetWacidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Wacid, true
}

// SetWacid sets field value
func (o *WhatsappCallingTerminateRequest) SetWacid(v string) {
	o.Wacid = v
}

func (o WhatsappCallingTerminateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["phoneId"] = o.PhoneId
	}
	if true {
		toSerialize["wacid"] = o.Wacid
	}
	return json.Marshal(toSerialize)
}

type NullableWhatsappCallingTerminateRequest struct {
	value *WhatsappCallingTerminateRequest
	isSet bool
}

func (v NullableWhatsappCallingTerminateRequest) Get() *WhatsappCallingTerminateRequest {
	return v.value
}

func (v *NullableWhatsappCallingTerminateRequest) Set(val *WhatsappCallingTerminateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableWhatsappCallingTerminateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableWhatsappCallingTerminateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWhatsappCallingTerminateRequest(val *WhatsappCallingTerminateRequest) *NullableWhatsappCallingTerminateRequest {
	return &NullableWhatsappCallingTerminateRequest{value: val, isSet: true}
}

func (v NullableWhatsappCallingTerminateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWhatsappCallingTerminateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


