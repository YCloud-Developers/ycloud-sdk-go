/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"encoding/json"
	"time"
)

// Email struct for Email
type Email struct {
	// Unique ID for the object.
	Id string `json:"id"`
	From *Mailbox `json:"from,omitempty"`
	// The intended recipients' email addresses.
	To []Mailbox `json:"to,omitempty"`
	// Recipients who will receive a copy of the email.
	Cc []Mailbox `json:"cc,omitempty"`
	// Recipients who will receive a blind carbon copy of the email.
	Bcc []Mailbox `json:"bcc,omitempty"`
	// If this field exists, then the reply should go to the addresses indicated in that field and not to the address(es) indicated in the `from` field.
	ReplyTo []Mailbox `json:"replyTo,omitempty"`
	// The email subject, which contains a short string identifying the topic of the message.
	Subject *string `json:"subject,omitempty"`
	// This is a summary of your email. Max length: 70.
	Summary *string `json:"summary,omitempty"`
	ContentType *EmailContentType `json:"contentType,omitempty"`
	// A unique (recommended) string to reference the object. This can be an order number or similar, and can be used to reconcile the object with your internal systems.
	ExternalId *string `json:"externalId,omitempty"`
	// Delivery report URL. You can provide a URL, and we will push the updated status report to your server in time. e.g., https://httpbin.org/anything?tag=api. Note: We recommend configuring Webhook Endpoints instead.
	CallbackUrl *string `json:"callbackUrl,omitempty"`
	// The time at which this message was created, formatted in [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339). e.g., `2022-06-01T12:00:00.000Z`.
	CreateTime *time.Time `json:"createTime,omitempty"`
	// Total recipients of this message, including `to`, `cc` and `bcc`.
	TotalRecipients *int32 `json:"totalRecipients,omitempty"`
	// Total price of this message.
	TotalPrice *float64 `json:"totalPrice,omitempty"`
	// Price currency. [ISO 4217 currency code](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *string `json:"currency,omitempty"`
}

// NewEmail instantiates a new Email object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmail(id string) *Email {
	this := Email{}
	this.Id = id
	return &this
}

// NewEmailWithDefaults instantiates a new Email object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailWithDefaults() *Email {
	this := Email{}
	return &this
}

// GetId returns the Id field value
func (o *Email) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Email) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Email) SetId(v string) {
	o.Id = v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *Email) GetFrom() Mailbox {
	if o == nil || o.From == nil {
		var ret Mailbox
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetFromOk() (*Mailbox, bool) {
	if o == nil || o.From == nil {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *Email) HasFrom() bool {
	if o != nil && o.From != nil {
		return true
	}

	return false
}

// SetFrom gets a reference to the given Mailbox and assigns it to the From field.
func (o *Email) SetFrom(v Mailbox) {
	o.From = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *Email) GetTo() []Mailbox {
	if o == nil || o.To == nil {
		var ret []Mailbox
		return ret
	}
	return o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetToOk() ([]Mailbox, bool) {
	if o == nil || o.To == nil {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *Email) HasTo() bool {
	if o != nil && o.To != nil {
		return true
	}

	return false
}

// SetTo gets a reference to the given []Mailbox and assigns it to the To field.
func (o *Email) SetTo(v []Mailbox) {
	o.To = v
}

// GetCc returns the Cc field value if set, zero value otherwise.
func (o *Email) GetCc() []Mailbox {
	if o == nil || o.Cc == nil {
		var ret []Mailbox
		return ret
	}
	return o.Cc
}

// GetCcOk returns a tuple with the Cc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetCcOk() ([]Mailbox, bool) {
	if o == nil || o.Cc == nil {
		return nil, false
	}
	return o.Cc, true
}

// HasCc returns a boolean if a field has been set.
func (o *Email) HasCc() bool {
	if o != nil && o.Cc != nil {
		return true
	}

	return false
}

// SetCc gets a reference to the given []Mailbox and assigns it to the Cc field.
func (o *Email) SetCc(v []Mailbox) {
	o.Cc = v
}

// GetBcc returns the Bcc field value if set, zero value otherwise.
func (o *Email) GetBcc() []Mailbox {
	if o == nil || o.Bcc == nil {
		var ret []Mailbox
		return ret
	}
	return o.Bcc
}

// GetBccOk returns a tuple with the Bcc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetBccOk() ([]Mailbox, bool) {
	if o == nil || o.Bcc == nil {
		return nil, false
	}
	return o.Bcc, true
}

// HasBcc returns a boolean if a field has been set.
func (o *Email) HasBcc() bool {
	if o != nil && o.Bcc != nil {
		return true
	}

	return false
}

// SetBcc gets a reference to the given []Mailbox and assigns it to the Bcc field.
func (o *Email) SetBcc(v []Mailbox) {
	o.Bcc = v
}

// GetReplyTo returns the ReplyTo field value if set, zero value otherwise.
func (o *Email) GetReplyTo() []Mailbox {
	if o == nil || o.ReplyTo == nil {
		var ret []Mailbox
		return ret
	}
	return o.ReplyTo
}

// GetReplyToOk returns a tuple with the ReplyTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetReplyToOk() ([]Mailbox, bool) {
	if o == nil || o.ReplyTo == nil {
		return nil, false
	}
	return o.ReplyTo, true
}

// HasReplyTo returns a boolean if a field has been set.
func (o *Email) HasReplyTo() bool {
	if o != nil && o.ReplyTo != nil {
		return true
	}

	return false
}

// SetReplyTo gets a reference to the given []Mailbox and assigns it to the ReplyTo field.
func (o *Email) SetReplyTo(v []Mailbox) {
	o.ReplyTo = v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *Email) GetSubject() string {
	if o == nil || o.Subject == nil {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetSubjectOk() (*string, bool) {
	if o == nil || o.Subject == nil {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *Email) HasSubject() bool {
	if o != nil && o.Subject != nil {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *Email) SetSubject(v string) {
	o.Subject = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *Email) GetSummary() string {
	if o == nil || o.Summary == nil {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetSummaryOk() (*string, bool) {
	if o == nil || o.Summary == nil {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *Email) HasSummary() bool {
	if o != nil && o.Summary != nil {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *Email) SetSummary(v string) {
	o.Summary = &v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *Email) GetContentType() EmailContentType {
	if o == nil || o.ContentType == nil {
		var ret EmailContentType
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetContentTypeOk() (*EmailContentType, bool) {
	if o == nil || o.ContentType == nil {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *Email) HasContentType() bool {
	if o != nil && o.ContentType != nil {
		return true
	}

	return false
}

// SetContentType gets a reference to the given EmailContentType and assigns it to the ContentType field.
func (o *Email) SetContentType(v EmailContentType) {
	o.ContentType = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *Email) GetExternalId() string {
	if o == nil || o.ExternalId == nil {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetExternalIdOk() (*string, bool) {
	if o == nil || o.ExternalId == nil {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *Email) HasExternalId() bool {
	if o != nil && o.ExternalId != nil {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *Email) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetCallbackUrl returns the CallbackUrl field value if set, zero value otherwise.
func (o *Email) GetCallbackUrl() string {
	if o == nil || o.CallbackUrl == nil {
		var ret string
		return ret
	}
	return *o.CallbackUrl
}

// GetCallbackUrlOk returns a tuple with the CallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetCallbackUrlOk() (*string, bool) {
	if o == nil || o.CallbackUrl == nil {
		return nil, false
	}
	return o.CallbackUrl, true
}

// HasCallbackUrl returns a boolean if a field has been set.
func (o *Email) HasCallbackUrl() bool {
	if o != nil && o.CallbackUrl != nil {
		return true
	}

	return false
}

// SetCallbackUrl gets a reference to the given string and assigns it to the CallbackUrl field.
func (o *Email) SetCallbackUrl(v string) {
	o.CallbackUrl = &v
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise.
func (o *Email) GetCreateTime() time.Time {
	if o == nil || o.CreateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetCreateTimeOk() (*time.Time, bool) {
	if o == nil || o.CreateTime == nil {
		return nil, false
	}
	return o.CreateTime, true
}

// HasCreateTime returns a boolean if a field has been set.
func (o *Email) HasCreateTime() bool {
	if o != nil && o.CreateTime != nil {
		return true
	}

	return false
}

// SetCreateTime gets a reference to the given time.Time and assigns it to the CreateTime field.
func (o *Email) SetCreateTime(v time.Time) {
	o.CreateTime = &v
}

// GetTotalRecipients returns the TotalRecipients field value if set, zero value otherwise.
func (o *Email) GetTotalRecipients() int32 {
	if o == nil || o.TotalRecipients == nil {
		var ret int32
		return ret
	}
	return *o.TotalRecipients
}

// GetTotalRecipientsOk returns a tuple with the TotalRecipients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetTotalRecipientsOk() (*int32, bool) {
	if o == nil || o.TotalRecipients == nil {
		return nil, false
	}
	return o.TotalRecipients, true
}

// HasTotalRecipients returns a boolean if a field has been set.
func (o *Email) HasTotalRecipients() bool {
	if o != nil && o.TotalRecipients != nil {
		return true
	}

	return false
}

// SetTotalRecipients gets a reference to the given int32 and assigns it to the TotalRecipients field.
func (o *Email) SetTotalRecipients(v int32) {
	o.TotalRecipients = &v
}

// GetTotalPrice returns the TotalPrice field value if set, zero value otherwise.
func (o *Email) GetTotalPrice() float64 {
	if o == nil || o.TotalPrice == nil {
		var ret float64
		return ret
	}
	return *o.TotalPrice
}

// GetTotalPriceOk returns a tuple with the TotalPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetTotalPriceOk() (*float64, bool) {
	if o == nil || o.TotalPrice == nil {
		return nil, false
	}
	return o.TotalPrice, true
}

// HasTotalPrice returns a boolean if a field has been set.
func (o *Email) HasTotalPrice() bool {
	if o != nil && o.TotalPrice != nil {
		return true
	}

	return false
}

// SetTotalPrice gets a reference to the given float64 and assigns it to the TotalPrice field.
func (o *Email) SetTotalPrice(v float64) {
	o.TotalPrice = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Email) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Email) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *Email) SetCurrency(v string) {
	o.Currency = &v
}

func (o Email) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.From != nil {
		toSerialize["from"] = o.From
	}
	if o.To != nil {
		toSerialize["to"] = o.To
	}
	if o.Cc != nil {
		toSerialize["cc"] = o.Cc
	}
	if o.Bcc != nil {
		toSerialize["bcc"] = o.Bcc
	}
	if o.ReplyTo != nil {
		toSerialize["replyTo"] = o.ReplyTo
	}
	if o.Subject != nil {
		toSerialize["subject"] = o.Subject
	}
	if o.Summary != nil {
		toSerialize["summary"] = o.Summary
	}
	if o.ContentType != nil {
		toSerialize["contentType"] = o.ContentType
	}
	if o.ExternalId != nil {
		toSerialize["externalId"] = o.ExternalId
	}
	if o.CallbackUrl != nil {
		toSerialize["callbackUrl"] = o.CallbackUrl
	}
	if o.CreateTime != nil {
		toSerialize["createTime"] = o.CreateTime
	}
	if o.TotalRecipients != nil {
		toSerialize["totalRecipients"] = o.TotalRecipients
	}
	if o.TotalPrice != nil {
		toSerialize["totalPrice"] = o.TotalPrice
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	return json.Marshal(toSerialize)
}

type NullableEmail struct {
	value *Email
	isSet bool
}

func (v NullableEmail) Get() *Email {
	return v.value
}

func (v *NullableEmail) Set(val *Email) {
	v.value = val
	v.isSet = true
}

func (v NullableEmail) IsSet() bool {
	return v.isSet
}

func (v *NullableEmail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmail(val *Email) *NullableEmail {
	return &NullableEmail{value: val, isSet: true}
}

func (v NullableEmail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


