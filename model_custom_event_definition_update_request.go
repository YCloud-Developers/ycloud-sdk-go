/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"encoding/json"
)

// CustomEventDefinitionUpdateRequest Contains the properties of the custom event definition to be updated.
type CustomEventDefinitionUpdateRequest struct {
	// The label of the event definition.
	Label *string `json:"label,omitempty"`
	// The description of the event definition.
	Description *string `json:"description,omitempty"`
}

// NewCustomEventDefinitionUpdateRequest instantiates a new CustomEventDefinitionUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomEventDefinitionUpdateRequest() *CustomEventDefinitionUpdateRequest {
	this := CustomEventDefinitionUpdateRequest{}
	return &this
}

// NewCustomEventDefinitionUpdateRequestWithDefaults instantiates a new CustomEventDefinitionUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomEventDefinitionUpdateRequestWithDefaults() *CustomEventDefinitionUpdateRequest {
	this := CustomEventDefinitionUpdateRequest{}
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *CustomEventDefinitionUpdateRequest) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomEventDefinitionUpdateRequest) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *CustomEventDefinitionUpdateRequest) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *CustomEventDefinitionUpdateRequest) SetLabel(v string) {
	o.Label = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CustomEventDefinitionUpdateRequest) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomEventDefinitionUpdateRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CustomEventDefinitionUpdateRequest) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CustomEventDefinitionUpdateRequest) SetDescription(v string) {
	o.Description = &v
}

func (o CustomEventDefinitionUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableCustomEventDefinitionUpdateRequest struct {
	value *CustomEventDefinitionUpdateRequest
	isSet bool
}

func (v NullableCustomEventDefinitionUpdateRequest) Get() *CustomEventDefinitionUpdateRequest {
	return v.value
}

func (v *NullableCustomEventDefinitionUpdateRequest) Set(val *CustomEventDefinitionUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomEventDefinitionUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomEventDefinitionUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomEventDefinitionUpdateRequest(val *CustomEventDefinitionUpdateRequest) *NullableCustomEventDefinitionUpdateRequest {
	return &NullableCustomEventDefinitionUpdateRequest{value: val, isSet: true}
}

func (v NullableCustomEventDefinitionUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomEventDefinitionUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


