/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"encoding/json"
)

// EventProperty Represents event property configuration for webhook endpoints. Specifies which properties should be included in the webhook payload for a specific event type.
type EventProperty struct {
	// The event type for which properties are configured. This field accepts any valid event type that supports property configuration.
	Event string `json:"event"`
	// A list of property names that should be included in the webhook payload for the specified event type. The available properties depend on the specific event type configured.
	Properties []string `json:"properties"`
}

// NewEventProperty instantiates a new EventProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventProperty(event string, properties []string) *EventProperty {
	this := EventProperty{}
	this.Event = event
	this.Properties = properties
	return &this
}

// NewEventPropertyWithDefaults instantiates a new EventProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventPropertyWithDefaults() *EventProperty {
	this := EventProperty{}
	return &this
}

// GetEvent returns the Event field value
func (o *EventProperty) GetEvent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *EventProperty) GetEventOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *EventProperty) SetEvent(v string) {
	o.Event = v
}

// GetProperties returns the Properties field value
func (o *EventProperty) GetProperties() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *EventProperty) GetPropertiesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties, true
}

// SetProperties sets field value
func (o *EventProperty) SetProperties(v []string) {
	o.Properties = v
}

func (o EventProperty) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["event"] = o.Event
	}
	if true {
		toSerialize["properties"] = o.Properties
	}
	return json.Marshal(toSerialize)
}

type NullableEventProperty struct {
	value *EventProperty
	isSet bool
}

func (v NullableEventProperty) Get() *EventProperty {
	return v.value
}

func (v *NullableEventProperty) Set(val *EventProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableEventProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableEventProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventProperty(val *EventProperty) *NullableEventProperty {
	return &NullableEventProperty{value: val, isSet: true}
}

func (v NullableEventProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


