/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"encoding/json"
)

// EmailSendRequest struct for EmailSendRequest
type EmailSendRequest struct {
	// - The sender's email. Its domain should be one that has been registered and activated in your account. - The sender's email address is required while the sender's name is optional. For example, both `support@example.com` and `Sender<support@example.com>` work.
	From string `json:"from"`
	// - The intended recipients' email addresses. - Supports a comma-separated list of one or more addresses. Max items: 100.
	To string `json:"to"`
	// The email subject, which contains a short string identifying the topic of the message. Max length: 255.
	Subject string `json:"subject"`
	// - The email body. Max size: 150 KB. - Variables in the form of `#var_1#` are supported, they should be used together with the `variables` parameter. Variable keys only support letters, digits, and the underline character (`_`). - You can use the [Test Templates](https://help.ycloud.com/en/articles/6006545) provided by YCloud for testing.
	Content string `json:"content"`
	ContentType *EmailContentType `json:"contentType,omitempty"`
	// - The variable key-value pairs that will replace the variable placeholders in `content` for each recipient. Variable keys are those that are wrapped with `#` as placeholders (e.g., `#var_1#`) in `content`. The placeholders will be replaced by variable values when sending the email. - The size of the array must be the same as the number of recipients in `to`. Be aware that `cc` and `bcc` addresses are excluded, and they can not receive emails that contain variables. - This parameter's size will be calculated together with the parameter `content`. The whole size must not exceed 150 KB.
	Variables []map[string]string `json:"variables,omitempty"`
	// Recipients who will receive a copy of the email.
	Cc *string `json:"cc,omitempty"`
	// Recipients who will receive a blind carbon copy of the email.
	Bcc *string `json:"bcc,omitempty"`
	// If this field exists, then the reply should go to the addresses indicated in that field and not to the address(es) indicated in the `from` field.
	ReplyTo *string `json:"replyTo,omitempty"`
	// This is a summary of your email. Max length: 70.
	Summary *string `json:"summary,omitempty"`
	// A unique (recommended) string to reference the object. This can be an order number or similar, and can be used to reconcile the object with your internal systems.
	ExternalId *string `json:"externalId,omitempty"`
	// Delivery report URL. You can provide a URL, and we will push the updated status report to your server in time. e.g., https://httpbin.org/anything?tag=api. Note: We recommend configuring Webhook Endpoints instead.
	CallbackUrl *string `json:"callbackUrl,omitempty"`
}

// NewEmailSendRequest instantiates a new EmailSendRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailSendRequest(from string, to string, subject string, content string) *EmailSendRequest {
	this := EmailSendRequest{}
	this.From = from
	this.To = to
	this.Subject = subject
	this.Content = content
	return &this
}

// NewEmailSendRequestWithDefaults instantiates a new EmailSendRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailSendRequestWithDefaults() *EmailSendRequest {
	this := EmailSendRequest{}
	return &this
}

// GetFrom returns the From field value
func (o *EmailSendRequest) GetFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *EmailSendRequest) GetFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *EmailSendRequest) SetFrom(v string) {
	o.From = v
}

// GetTo returns the To field value
func (o *EmailSendRequest) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *EmailSendRequest) GetToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *EmailSendRequest) SetTo(v string) {
	o.To = v
}

// GetSubject returns the Subject field value
func (o *EmailSendRequest) GetSubject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *EmailSendRequest) GetSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *EmailSendRequest) SetSubject(v string) {
	o.Subject = v
}

// GetContent returns the Content field value
func (o *EmailSendRequest) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *EmailSendRequest) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *EmailSendRequest) SetContent(v string) {
	o.Content = v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *EmailSendRequest) GetContentType() EmailContentType {
	if o == nil || o.ContentType == nil {
		var ret EmailContentType
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailSendRequest) GetContentTypeOk() (*EmailContentType, bool) {
	if o == nil || o.ContentType == nil {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *EmailSendRequest) HasContentType() bool {
	if o != nil && o.ContentType != nil {
		return true
	}

	return false
}

// SetContentType gets a reference to the given EmailContentType and assigns it to the ContentType field.
func (o *EmailSendRequest) SetContentType(v EmailContentType) {
	o.ContentType = &v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *EmailSendRequest) GetVariables() []map[string]string {
	if o == nil || o.Variables == nil {
		var ret []map[string]string
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailSendRequest) GetVariablesOk() ([]map[string]string, bool) {
	if o == nil || o.Variables == nil {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *EmailSendRequest) HasVariables() bool {
	if o != nil && o.Variables != nil {
		return true
	}

	return false
}

// SetVariables gets a reference to the given []map[string]string and assigns it to the Variables field.
func (o *EmailSendRequest) SetVariables(v []map[string]string) {
	o.Variables = v
}

// GetCc returns the Cc field value if set, zero value otherwise.
func (o *EmailSendRequest) GetCc() string {
	if o == nil || o.Cc == nil {
		var ret string
		return ret
	}
	return *o.Cc
}

// GetCcOk returns a tuple with the Cc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailSendRequest) GetCcOk() (*string, bool) {
	if o == nil || o.Cc == nil {
		return nil, false
	}
	return o.Cc, true
}

// HasCc returns a boolean if a field has been set.
func (o *EmailSendRequest) HasCc() bool {
	if o != nil && o.Cc != nil {
		return true
	}

	return false
}

// SetCc gets a reference to the given string and assigns it to the Cc field.
func (o *EmailSendRequest) SetCc(v string) {
	o.Cc = &v
}

// GetBcc returns the Bcc field value if set, zero value otherwise.
func (o *EmailSendRequest) GetBcc() string {
	if o == nil || o.Bcc == nil {
		var ret string
		return ret
	}
	return *o.Bcc
}

// GetBccOk returns a tuple with the Bcc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailSendRequest) GetBccOk() (*string, bool) {
	if o == nil || o.Bcc == nil {
		return nil, false
	}
	return o.Bcc, true
}

// HasBcc returns a boolean if a field has been set.
func (o *EmailSendRequest) HasBcc() bool {
	if o != nil && o.Bcc != nil {
		return true
	}

	return false
}

// SetBcc gets a reference to the given string and assigns it to the Bcc field.
func (o *EmailSendRequest) SetBcc(v string) {
	o.Bcc = &v
}

// GetReplyTo returns the ReplyTo field value if set, zero value otherwise.
func (o *EmailSendRequest) GetReplyTo() string {
	if o == nil || o.ReplyTo == nil {
		var ret string
		return ret
	}
	return *o.ReplyTo
}

// GetReplyToOk returns a tuple with the ReplyTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailSendRequest) GetReplyToOk() (*string, bool) {
	if o == nil || o.ReplyTo == nil {
		return nil, false
	}
	return o.ReplyTo, true
}

// HasReplyTo returns a boolean if a field has been set.
func (o *EmailSendRequest) HasReplyTo() bool {
	if o != nil && o.ReplyTo != nil {
		return true
	}

	return false
}

// SetReplyTo gets a reference to the given string and assigns it to the ReplyTo field.
func (o *EmailSendRequest) SetReplyTo(v string) {
	o.ReplyTo = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *EmailSendRequest) GetSummary() string {
	if o == nil || o.Summary == nil {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailSendRequest) GetSummaryOk() (*string, bool) {
	if o == nil || o.Summary == nil {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *EmailSendRequest) HasSummary() bool {
	if o != nil && o.Summary != nil {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *EmailSendRequest) SetSummary(v string) {
	o.Summary = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *EmailSendRequest) GetExternalId() string {
	if o == nil || o.ExternalId == nil {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailSendRequest) GetExternalIdOk() (*string, bool) {
	if o == nil || o.ExternalId == nil {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *EmailSendRequest) HasExternalId() bool {
	if o != nil && o.ExternalId != nil {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *EmailSendRequest) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetCallbackUrl returns the CallbackUrl field value if set, zero value otherwise.
func (o *EmailSendRequest) GetCallbackUrl() string {
	if o == nil || o.CallbackUrl == nil {
		var ret string
		return ret
	}
	return *o.CallbackUrl
}

// GetCallbackUrlOk returns a tuple with the CallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailSendRequest) GetCallbackUrlOk() (*string, bool) {
	if o == nil || o.CallbackUrl == nil {
		return nil, false
	}
	return o.CallbackUrl, true
}

// HasCallbackUrl returns a boolean if a field has been set.
func (o *EmailSendRequest) HasCallbackUrl() bool {
	if o != nil && o.CallbackUrl != nil {
		return true
	}

	return false
}

// SetCallbackUrl gets a reference to the given string and assigns it to the CallbackUrl field.
func (o *EmailSendRequest) SetCallbackUrl(v string) {
	o.CallbackUrl = &v
}

func (o EmailSendRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["from"] = o.From
	}
	if true {
		toSerialize["to"] = o.To
	}
	if true {
		toSerialize["subject"] = o.Subject
	}
	if true {
		toSerialize["content"] = o.Content
	}
	if o.ContentType != nil {
		toSerialize["contentType"] = o.ContentType
	}
	if o.Variables != nil {
		toSerialize["variables"] = o.Variables
	}
	if o.Cc != nil {
		toSerialize["cc"] = o.Cc
	}
	if o.Bcc != nil {
		toSerialize["bcc"] = o.Bcc
	}
	if o.ReplyTo != nil {
		toSerialize["replyTo"] = o.ReplyTo
	}
	if o.Summary != nil {
		toSerialize["summary"] = o.Summary
	}
	if o.ExternalId != nil {
		toSerialize["externalId"] = o.ExternalId
	}
	if o.CallbackUrl != nil {
		toSerialize["callbackUrl"] = o.CallbackUrl
	}
	return json.Marshal(toSerialize)
}

type NullableEmailSendRequest struct {
	value *EmailSendRequest
	isSet bool
}

func (v NullableEmailSendRequest) Get() *EmailSendRequest {
	return v.value
}

func (v *NullableEmailSendRequest) Set(val *EmailSendRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailSendRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailSendRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailSendRequest(val *EmailSendRequest) *NullableEmailSendRequest {
	return &NullableEmailSendRequest{value: val, isSet: true}
}

func (v NullableEmailSendRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailSendRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


