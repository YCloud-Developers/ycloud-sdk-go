/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"encoding/json"
	"time"
)

// CustomEventDefinition Represents a custom event definition.
type CustomEventDefinition struct {
	// The name of the custom event definition.
	Name *string `json:"name,omitempty"`
	// The label of the event definition, used for display purposes.
	Label *string `json:"label,omitempty"`
	// The description of the event definition.
	Description *string `json:"description,omitempty"`
	// Type of the object that the event will be associated with. - `CONTACT`: Indicates that the object is a `contact`.
	ObjectType *string `json:"objectType,omitempty"`
	// The time at which this object is created, formatted in [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339). e.g., `2022-06-01T12:00:00.000Z`.
	CreateTime *time.Time `json:"createTime,omitempty"`
	// The list of property definitions for the event definition.
	Properties []CustomEventDefinitionProperty `json:"properties,omitempty"`
}

// NewCustomEventDefinition instantiates a new CustomEventDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomEventDefinition() *CustomEventDefinition {
	this := CustomEventDefinition{}
	return &this
}

// NewCustomEventDefinitionWithDefaults instantiates a new CustomEventDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomEventDefinitionWithDefaults() *CustomEventDefinition {
	this := CustomEventDefinition{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CustomEventDefinition) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomEventDefinition) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CustomEventDefinition) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CustomEventDefinition) SetName(v string) {
	o.Name = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *CustomEventDefinition) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomEventDefinition) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *CustomEventDefinition) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *CustomEventDefinition) SetLabel(v string) {
	o.Label = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CustomEventDefinition) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomEventDefinition) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CustomEventDefinition) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CustomEventDefinition) SetDescription(v string) {
	o.Description = &v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *CustomEventDefinition) GetObjectType() string {
	if o == nil || o.ObjectType == nil {
		var ret string
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomEventDefinition) GetObjectTypeOk() (*string, bool) {
	if o == nil || o.ObjectType == nil {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *CustomEventDefinition) HasObjectType() bool {
	if o != nil && o.ObjectType != nil {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given string and assigns it to the ObjectType field.
func (o *CustomEventDefinition) SetObjectType(v string) {
	o.ObjectType = &v
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise.
func (o *CustomEventDefinition) GetCreateTime() time.Time {
	if o == nil || o.CreateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomEventDefinition) GetCreateTimeOk() (*time.Time, bool) {
	if o == nil || o.CreateTime == nil {
		return nil, false
	}
	return o.CreateTime, true
}

// HasCreateTime returns a boolean if a field has been set.
func (o *CustomEventDefinition) HasCreateTime() bool {
	if o != nil && o.CreateTime != nil {
		return true
	}

	return false
}

// SetCreateTime gets a reference to the given time.Time and assigns it to the CreateTime field.
func (o *CustomEventDefinition) SetCreateTime(v time.Time) {
	o.CreateTime = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *CustomEventDefinition) GetProperties() []CustomEventDefinitionProperty {
	if o == nil || o.Properties == nil {
		var ret []CustomEventDefinitionProperty
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomEventDefinition) GetPropertiesOk() ([]CustomEventDefinitionProperty, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *CustomEventDefinition) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given []CustomEventDefinitionProperty and assigns it to the Properties field.
func (o *CustomEventDefinition) SetProperties(v []CustomEventDefinitionProperty) {
	o.Properties = v
}

func (o CustomEventDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.ObjectType != nil {
		toSerialize["objectType"] = o.ObjectType
	}
	if o.CreateTime != nil {
		toSerialize["createTime"] = o.CreateTime
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	return json.Marshal(toSerialize)
}

type NullableCustomEventDefinition struct {
	value *CustomEventDefinition
	isSet bool
}

func (v NullableCustomEventDefinition) Get() *CustomEventDefinition {
	return v.value
}

func (v *NullableCustomEventDefinition) Set(val *CustomEventDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomEventDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomEventDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomEventDefinition(val *CustomEventDefinition) *NullableCustomEventDefinition {
	return &NullableCustomEventDefinition{value: val, isSet: true}
}

func (v NullableCustomEventDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomEventDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
