/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"encoding/json"
	"fmt"
)

// WhatsappTemplateCategory Category of WhatsApp templates. - `AUTHENTICATION`: Enable businesses to authenticate users with one-time passcodes, potentially at multiple steps in the login process (e.g., account verification, account recovery, integrity challenges). - `MARKETING`: Include promotions or offers, informational updates, or invitations for customers to respond / take action. Any conversation that does not qualify as utility or authentication is a marketing conversation. - `UTILITY`: Facilitate a specific, agreed-upon request or transaction or update to a customer about an ongoing transaction, including post-purchase notifications and recurring billing statements.
type WhatsappTemplateCategory string

// List of WhatsappTemplateCategory
const (
	WHATSAPPTEMPLATECATEGORY_AUTHENTICATION WhatsappTemplateCategory = "AUTHENTICATION"
	WHATSAPPTEMPLATECATEGORY_MARKETING WhatsappTemplateCategory = "MARKETING"
	WHATSAPPTEMPLATECATEGORY_UTILITY WhatsappTemplateCategory = "UTILITY"
)

// All allowed values of WhatsappTemplateCategory enum
var AllowedWhatsappTemplateCategoryEnumValues = []WhatsappTemplateCategory{
	"AUTHENTICATION",
	"MARKETING",
	"UTILITY",
}

func (v *WhatsappTemplateCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WhatsappTemplateCategory(value)
	*v = enumTypeValue
	return nil
}

// NewWhatsappTemplateCategoryFromValue returns a pointer to a valid WhatsappTemplateCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWhatsappTemplateCategoryFromValue(v string) (*WhatsappTemplateCategory, error) {
	ev := WhatsappTemplateCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WhatsappTemplateCategory: valid values are %v", v, AllowedWhatsappTemplateCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WhatsappTemplateCategory) IsValid() bool {
	for _, existing := range AllowedWhatsappTemplateCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WhatsappTemplateCategory value
func (v WhatsappTemplateCategory) Ptr() *WhatsappTemplateCategory {
	return &v
}

type NullableWhatsappTemplateCategory struct {
	value *WhatsappTemplateCategory
	isSet bool
}

func (v NullableWhatsappTemplateCategory) Get() *WhatsappTemplateCategory {
	return v.value
}

func (v *NullableWhatsappTemplateCategory) Set(val *WhatsappTemplateCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableWhatsappTemplateCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableWhatsappTemplateCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWhatsappTemplateCategory(val *WhatsappTemplateCategory) *NullableWhatsappTemplateCategory {
	return &NullableWhatsappTemplateCategory{value: val, isSet: true}
}

func (v NullableWhatsappTemplateCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWhatsappTemplateCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

