/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"encoding/json"
)

// VerificationCheck struct for VerificationCheck
type VerificationCheck struct {
	// ID of this verification check.
	Id string `json:"id"`
	// Whether the verification code is valid for this check.
	Valid bool `json:"valid"`
	Status *VerificationStatus `json:"status,omitempty"`
	// The recipient's phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format or email address.
	To *string `json:"to,omitempty"`
	Channel *VerificationChannel `json:"channel,omitempty"`
}

// NewVerificationCheck instantiates a new VerificationCheck object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerificationCheck(id string, valid bool) *VerificationCheck {
	this := VerificationCheck{}
	this.Id = id
	this.Valid = valid
	return &this
}

// NewVerificationCheckWithDefaults instantiates a new VerificationCheck object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerificationCheckWithDefaults() *VerificationCheck {
	this := VerificationCheck{}
	return &this
}

// GetId returns the Id field value
func (o *VerificationCheck) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VerificationCheck) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VerificationCheck) SetId(v string) {
	o.Id = v
}

// GetValid returns the Valid field value
func (o *VerificationCheck) GetValid() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Valid
}

// GetValidOk returns a tuple with the Valid field value
// and a boolean to check if the value has been set.
func (o *VerificationCheck) GetValidOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Valid, true
}

// SetValid sets field value
func (o *VerificationCheck) SetValid(v bool) {
	o.Valid = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *VerificationCheck) GetStatus() VerificationStatus {
	if o == nil || o.Status == nil {
		var ret VerificationStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationCheck) GetStatusOk() (*VerificationStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *VerificationCheck) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given VerificationStatus and assigns it to the Status field.
func (o *VerificationCheck) SetStatus(v VerificationStatus) {
	o.Status = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *VerificationCheck) GetTo() string {
	if o == nil || o.To == nil {
		var ret string
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationCheck) GetToOk() (*string, bool) {
	if o == nil || o.To == nil {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *VerificationCheck) HasTo() bool {
	if o != nil && o.To != nil {
		return true
	}

	return false
}

// SetTo gets a reference to the given string and assigns it to the To field.
func (o *VerificationCheck) SetTo(v string) {
	o.To = &v
}

// GetChannel returns the Channel field value if set, zero value otherwise.
func (o *VerificationCheck) GetChannel() VerificationChannel {
	if o == nil || o.Channel == nil {
		var ret VerificationChannel
		return ret
	}
	return *o.Channel
}

// GetChannelOk returns a tuple with the Channel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationCheck) GetChannelOk() (*VerificationChannel, bool) {
	if o == nil || o.Channel == nil {
		return nil, false
	}
	return o.Channel, true
}

// HasChannel returns a boolean if a field has been set.
func (o *VerificationCheck) HasChannel() bool {
	if o != nil && o.Channel != nil {
		return true
	}

	return false
}

// SetChannel gets a reference to the given VerificationChannel and assigns it to the Channel field.
func (o *VerificationCheck) SetChannel(v VerificationChannel) {
	o.Channel = &v
}

func (o VerificationCheck) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["valid"] = o.Valid
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.To != nil {
		toSerialize["to"] = o.To
	}
	if o.Channel != nil {
		toSerialize["channel"] = o.Channel
	}
	return json.Marshal(toSerialize)
}

type NullableVerificationCheck struct {
	value *VerificationCheck
	isSet bool
}

func (v NullableVerificationCheck) Get() *VerificationCheck {
	return v.value
}

func (v *NullableVerificationCheck) Set(val *VerificationCheck) {
	v.value = val
	v.isSet = true
}

func (v NullableVerificationCheck) IsSet() bool {
	return v.isSet
}

func (v *NullableVerificationCheck) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerificationCheck(val *VerificationCheck) *NullableVerificationCheck {
	return &NullableVerificationCheck{value: val, isSet: true}
}

func (v NullableVerificationCheck) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerificationCheck) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


