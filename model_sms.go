/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"encoding/json"
	"time"
)

// Sms struct for Sms
type Sms struct {
	// Unique ID for the object.
	Id string `json:"id"`
	// The recipient's phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format.
	To string `json:"to"`
	// The text of this message.
	Text *string `json:"text,omitempty"`
	// Sender ID to be used.
	SenderId *string `json:"senderId,omitempty"`
	// [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
	RegionCode *string `json:"regionCode,omitempty"`
	// Number of message segments. See [SMS character encoding](https://help.ycloud.com/en/articles/3083427-sms-character-encoding) for more info.
	TotalSegments *int32 `json:"totalSegments,omitempty"`
	// Total price of this message.
	TotalPrice *float64 `json:"totalPrice,omitempty"`
	// Price currency. [ISO 4217 currency code](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *string `json:"currency,omitempty"`
	// Delivery status. One of `accepted`, `sent`, `delivered`, `undelivered`, or `failed`. - `accepted`: The messaging request is accepted by our system. - `failed`: The message failed to be sent from our system. - `sent`: The message has been sent from our system. - `delivered`: Our system has received a delivery receipt indicating that message is delivered. - `undelivered`: Our system has received a delivery receipt indicating that message is not delivered.
	Status *string `json:"status,omitempty"`
	// Error code when the message is undeliverable.
	ErrorCode *string `json:"errorCode,omitempty"`
	// The time at which this message was created, formatted in [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339). e.g., `2022-03-01T12:00:00.000Z`.
	CreateTime *time.Time `json:"createTime,omitempty"`
	// The time at which the delivery report for this message was updated, formatted in [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339). e.g., `2022-03-01T12:00:00.000Z`.
	UpdateTime *time.Time `json:"updateTime,omitempty"`
	// A unique (recommended) string to reference the object. This can be an order number or similar, and can be used to reconcile the object with your internal systems.
	ExternalId *string `json:"externalId,omitempty"`
	// Delivery report URL. You can provide a URL, and we will push the updated status report to your server in time. e.g., https://httpbin.org/anything?tag=api. Note: We recommend configuring Webhook Endpoints instead.
	CallbackUrl *string `json:"callbackUrl,omitempty"`
	// This can be either empty or one of `sms`, or `verify`. Defaults to `sms`. - `sms`: Indicates that the message is sent via the **SMS** product. - `verify`: Indicates that the message is sent via the **Verify** product.
	BizType *string `json:"bizType,omitempty"`
	// The verification ID. Included only when `bizType` is `verify`.
	VerificationId *string `json:"verificationId,omitempty"`
}

// NewSms instantiates a new Sms object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSms(id string, to string) *Sms {
	this := Sms{}
	this.Id = id
	this.To = to
	return &this
}

// NewSmsWithDefaults instantiates a new Sms object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmsWithDefaults() *Sms {
	this := Sms{}
	return &this
}

// GetId returns the Id field value
func (o *Sms) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Sms) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Sms) SetId(v string) {
	o.Id = v
}

// GetTo returns the To field value
func (o *Sms) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *Sms) GetToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *Sms) SetTo(v string) {
	o.To = v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *Sms) GetText() string {
	if o == nil || o.Text == nil {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sms) GetTextOk() (*string, bool) {
	if o == nil || o.Text == nil {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *Sms) HasText() bool {
	if o != nil && o.Text != nil {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *Sms) SetText(v string) {
	o.Text = &v
}

// GetSenderId returns the SenderId field value if set, zero value otherwise.
func (o *Sms) GetSenderId() string {
	if o == nil || o.SenderId == nil {
		var ret string
		return ret
	}
	return *o.SenderId
}

// GetSenderIdOk returns a tuple with the SenderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sms) GetSenderIdOk() (*string, bool) {
	if o == nil || o.SenderId == nil {
		return nil, false
	}
	return o.SenderId, true
}

// HasSenderId returns a boolean if a field has been set.
func (o *Sms) HasSenderId() bool {
	if o != nil && o.SenderId != nil {
		return true
	}

	return false
}

// SetSenderId gets a reference to the given string and assigns it to the SenderId field.
func (o *Sms) SetSenderId(v string) {
	o.SenderId = &v
}

// GetRegionCode returns the RegionCode field value if set, zero value otherwise.
func (o *Sms) GetRegionCode() string {
	if o == nil || o.RegionCode == nil {
		var ret string
		return ret
	}
	return *o.RegionCode
}

// GetRegionCodeOk returns a tuple with the RegionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sms) GetRegionCodeOk() (*string, bool) {
	if o == nil || o.RegionCode == nil {
		return nil, false
	}
	return o.RegionCode, true
}

// HasRegionCode returns a boolean if a field has been set.
func (o *Sms) HasRegionCode() bool {
	if o != nil && o.RegionCode != nil {
		return true
	}

	return false
}

// SetRegionCode gets a reference to the given string and assigns it to the RegionCode field.
func (o *Sms) SetRegionCode(v string) {
	o.RegionCode = &v
}

// GetTotalSegments returns the TotalSegments field value if set, zero value otherwise.
func (o *Sms) GetTotalSegments() int32 {
	if o == nil || o.TotalSegments == nil {
		var ret int32
		return ret
	}
	return *o.TotalSegments
}

// GetTotalSegmentsOk returns a tuple with the TotalSegments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sms) GetTotalSegmentsOk() (*int32, bool) {
	if o == nil || o.TotalSegments == nil {
		return nil, false
	}
	return o.TotalSegments, true
}

// HasTotalSegments returns a boolean if a field has been set.
func (o *Sms) HasTotalSegments() bool {
	if o != nil && o.TotalSegments != nil {
		return true
	}

	return false
}

// SetTotalSegments gets a reference to the given int32 and assigns it to the TotalSegments field.
func (o *Sms) SetTotalSegments(v int32) {
	o.TotalSegments = &v
}

// GetTotalPrice returns the TotalPrice field value if set, zero value otherwise.
func (o *Sms) GetTotalPrice() float64 {
	if o == nil || o.TotalPrice == nil {
		var ret float64
		return ret
	}
	return *o.TotalPrice
}

// GetTotalPriceOk returns a tuple with the TotalPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sms) GetTotalPriceOk() (*float64, bool) {
	if o == nil || o.TotalPrice == nil {
		return nil, false
	}
	return o.TotalPrice, true
}

// HasTotalPrice returns a boolean if a field has been set.
func (o *Sms) HasTotalPrice() bool {
	if o != nil && o.TotalPrice != nil {
		return true
	}

	return false
}

// SetTotalPrice gets a reference to the given float64 and assigns it to the TotalPrice field.
func (o *Sms) SetTotalPrice(v float64) {
	o.TotalPrice = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Sms) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sms) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Sms) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *Sms) SetCurrency(v string) {
	o.Currency = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Sms) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sms) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Sms) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Sms) SetStatus(v string) {
	o.Status = &v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *Sms) GetErrorCode() string {
	if o == nil || o.ErrorCode == nil {
		var ret string
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sms) GetErrorCodeOk() (*string, bool) {
	if o == nil || o.ErrorCode == nil {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *Sms) HasErrorCode() bool {
	if o != nil && o.ErrorCode != nil {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given string and assigns it to the ErrorCode field.
func (o *Sms) SetErrorCode(v string) {
	o.ErrorCode = &v
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise.
func (o *Sms) GetCreateTime() time.Time {
	if o == nil || o.CreateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sms) GetCreateTimeOk() (*time.Time, bool) {
	if o == nil || o.CreateTime == nil {
		return nil, false
	}
	return o.CreateTime, true
}

// HasCreateTime returns a boolean if a field has been set.
func (o *Sms) HasCreateTime() bool {
	if o != nil && o.CreateTime != nil {
		return true
	}

	return false
}

// SetCreateTime gets a reference to the given time.Time and assigns it to the CreateTime field.
func (o *Sms) SetCreateTime(v time.Time) {
	o.CreateTime = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *Sms) GetUpdateTime() time.Time {
	if o == nil || o.UpdateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sms) GetUpdateTimeOk() (*time.Time, bool) {
	if o == nil || o.UpdateTime == nil {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *Sms) HasUpdateTime() bool {
	if o != nil && o.UpdateTime != nil {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given time.Time and assigns it to the UpdateTime field.
func (o *Sms) SetUpdateTime(v time.Time) {
	o.UpdateTime = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *Sms) GetExternalId() string {
	if o == nil || o.ExternalId == nil {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sms) GetExternalIdOk() (*string, bool) {
	if o == nil || o.ExternalId == nil {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *Sms) HasExternalId() bool {
	if o != nil && o.ExternalId != nil {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *Sms) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetCallbackUrl returns the CallbackUrl field value if set, zero value otherwise.
func (o *Sms) GetCallbackUrl() string {
	if o == nil || o.CallbackUrl == nil {
		var ret string
		return ret
	}
	return *o.CallbackUrl
}

// GetCallbackUrlOk returns a tuple with the CallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sms) GetCallbackUrlOk() (*string, bool) {
	if o == nil || o.CallbackUrl == nil {
		return nil, false
	}
	return o.CallbackUrl, true
}

// HasCallbackUrl returns a boolean if a field has been set.
func (o *Sms) HasCallbackUrl() bool {
	if o != nil && o.CallbackUrl != nil {
		return true
	}

	return false
}

// SetCallbackUrl gets a reference to the given string and assigns it to the CallbackUrl field.
func (o *Sms) SetCallbackUrl(v string) {
	o.CallbackUrl = &v
}

// GetBizType returns the BizType field value if set, zero value otherwise.
func (o *Sms) GetBizType() string {
	if o == nil || o.BizType == nil {
		var ret string
		return ret
	}
	return *o.BizType
}

// GetBizTypeOk returns a tuple with the BizType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sms) GetBizTypeOk() (*string, bool) {
	if o == nil || o.BizType == nil {
		return nil, false
	}
	return o.BizType, true
}

// HasBizType returns a boolean if a field has been set.
func (o *Sms) HasBizType() bool {
	if o != nil && o.BizType != nil {
		return true
	}

	return false
}

// SetBizType gets a reference to the given string and assigns it to the BizType field.
func (o *Sms) SetBizType(v string) {
	o.BizType = &v
}

// GetVerificationId returns the VerificationId field value if set, zero value otherwise.
func (o *Sms) GetVerificationId() string {
	if o == nil || o.VerificationId == nil {
		var ret string
		return ret
	}
	return *o.VerificationId
}

// GetVerificationIdOk returns a tuple with the VerificationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sms) GetVerificationIdOk() (*string, bool) {
	if o == nil || o.VerificationId == nil {
		return nil, false
	}
	return o.VerificationId, true
}

// HasVerificationId returns a boolean if a field has been set.
func (o *Sms) HasVerificationId() bool {
	if o != nil && o.VerificationId != nil {
		return true
	}

	return false
}

// SetVerificationId gets a reference to the given string and assigns it to the VerificationId field.
func (o *Sms) SetVerificationId(v string) {
	o.VerificationId = &v
}

func (o Sms) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["to"] = o.To
	}
	if o.Text != nil {
		toSerialize["text"] = o.Text
	}
	if o.SenderId != nil {
		toSerialize["senderId"] = o.SenderId
	}
	if o.RegionCode != nil {
		toSerialize["regionCode"] = o.RegionCode
	}
	if o.TotalSegments != nil {
		toSerialize["totalSegments"] = o.TotalSegments
	}
	if o.TotalPrice != nil {
		toSerialize["totalPrice"] = o.TotalPrice
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.ErrorCode != nil {
		toSerialize["errorCode"] = o.ErrorCode
	}
	if o.CreateTime != nil {
		toSerialize["createTime"] = o.CreateTime
	}
	if o.UpdateTime != nil {
		toSerialize["updateTime"] = o.UpdateTime
	}
	if o.ExternalId != nil {
		toSerialize["externalId"] = o.ExternalId
	}
	if o.CallbackUrl != nil {
		toSerialize["callbackUrl"] = o.CallbackUrl
	}
	if o.BizType != nil {
		toSerialize["bizType"] = o.BizType
	}
	if o.VerificationId != nil {
		toSerialize["verificationId"] = o.VerificationId
	}
	return json.Marshal(toSerialize)
}

type NullableSms struct {
	value *Sms
	isSet bool
}

func (v NullableSms) Get() *Sms {
	return v.value
}

func (v *NullableSms) Set(val *Sms) {
	v.value = val
	v.isSet = true
}

func (v NullableSms) IsSet() bool {
	return v.isSet
}

func (v *NullableSms) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSms(val *Sms) *NullableSms {
	return &NullableSms{value: val, isSet: true}
}

func (v NullableSms) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSms) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
