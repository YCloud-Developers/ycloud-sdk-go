/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"encoding/json"
	"fmt"
)

// WhatsappPricingType WhatsApp pricing type. This field is only available in PMP (Per-Message Pricing) mode. - `regular`: Indicates the message is billable. - `free_customer_service`: Indicates the message is free because it was either a utility template message or non-template message sent within a customer service window. - `free_entry_point`: Indicates the message is free because it is part of a free-entry point conversation.
type WhatsappPricingType string

// List of WhatsappPricingType
const (
	WHATSAPPPRICINGTYPE_REGULAR WhatsappPricingType = "regular"
	WHATSAPPPRICINGTYPE_FREE_CUSTOMER_SERVICE WhatsappPricingType = "free_customer_service"
	WHATSAPPPRICINGTYPE_FREE_ENTRY_POINT WhatsappPricingType = "free_entry_point"
)

// All allowed values of WhatsappPricingType enum
var AllowedWhatsappPricingTypeEnumValues = []WhatsappPricingType{
	"regular",
	"free_customer_service",
	"free_entry_point",
}

func (v *WhatsappPricingType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WhatsappPricingType(value)
	*v = enumTypeValue
	return nil
}

// NewWhatsappPricingTypeFromValue returns a pointer to a valid WhatsappPricingType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWhatsappPricingTypeFromValue(v string) (*WhatsappPricingType, error) {
	ev := WhatsappPricingType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WhatsappPricingType: valid values are %v", v, AllowedWhatsappPricingTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WhatsappPricingType) IsValid() bool {
	for _, existing := range AllowedWhatsappPricingTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WhatsappPricingType value
func (v WhatsappPricingType) Ptr() *WhatsappPricingType {
	return &v
}

type NullableWhatsappPricingType struct {
	value *WhatsappPricingType
	isSet bool
}

func (v NullableWhatsappPricingType) Get() *WhatsappPricingType {
	return v.value
}

func (v *NullableWhatsappPricingType) Set(val *WhatsappPricingType) {
	v.value = val
	v.isSet = true
}

func (v NullableWhatsappPricingType) IsSet() bool {
	return v.isSet
}

func (v *NullableWhatsappPricingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWhatsappPricingType(val *WhatsappPricingType) *NullableWhatsappPricingType {
	return &NullableWhatsappPricingType{value: val, isSet: true}
}

func (v NullableWhatsappPricingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWhatsappPricingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

