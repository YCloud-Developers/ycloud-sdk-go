/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"encoding/json"
	"fmt"
)

// ContactAttributeChangeNewValue - The new value of the attribute after the change. Can be a string, number, array, or null. Not included when the value is null.
type ContactAttributeChangeNewValue struct {
	ArrayOfString *[]string
	Float32 *float32
	String *string
}

// []stringAsContactAttributeChangeNewValue is a convenience function that returns []string wrapped in ContactAttributeChangeNewValue
func ArrayOfStringAsContactAttributeChangeNewValue(v *[]string) ContactAttributeChangeNewValue {
	return ContactAttributeChangeNewValue{
		ArrayOfString: v,
	}
}

// float32AsContactAttributeChangeNewValue is a convenience function that returns float32 wrapped in ContactAttributeChangeNewValue
func Float32AsContactAttributeChangeNewValue(v *float32) ContactAttributeChangeNewValue {
	return ContactAttributeChangeNewValue{
		Float32: v,
	}
}

// stringAsContactAttributeChangeNewValue is a convenience function that returns string wrapped in ContactAttributeChangeNewValue
func StringAsContactAttributeChangeNewValue(v *string) ContactAttributeChangeNewValue {
	return ContactAttributeChangeNewValue{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ContactAttributeChangeNewValue) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfString
	err = newStrictDecoder(data).Decode(&dst.ArrayOfString)
	if err == nil {
		jsonArrayOfString, _ := json.Marshal(dst.ArrayOfString)
		if string(jsonArrayOfString) == "{}" { // empty struct
			dst.ArrayOfString = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfString = nil
	}

	// try to unmarshal data into Float32
	err = newStrictDecoder(data).Decode(&dst.Float32)
	if err == nil {
		jsonFloat32, _ := json.Marshal(dst.Float32)
		if string(jsonFloat32) == "{}" { // empty struct
			dst.Float32 = nil
		} else {
			match++
		}
	} else {
		dst.Float32 = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfString = nil
		dst.Float32 = nil
		dst.String = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(ContactAttributeChangeNewValue)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(ContactAttributeChangeNewValue)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ContactAttributeChangeNewValue) MarshalJSON() ([]byte, error) {
	if src.ArrayOfString != nil {
		return json.Marshal(&src.ArrayOfString)
	}

	if src.Float32 != nil {
		return json.Marshal(&src.Float32)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ContactAttributeChangeNewValue) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfString != nil {
		return obj.ArrayOfString
	}

	if obj.Float32 != nil {
		return obj.Float32
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableContactAttributeChangeNewValue struct {
	value *ContactAttributeChangeNewValue
	isSet bool
}

func (v NullableContactAttributeChangeNewValue) Get() *ContactAttributeChangeNewValue {
	return v.value
}

func (v *NullableContactAttributeChangeNewValue) Set(val *ContactAttributeChangeNewValue) {
	v.value = val
	v.isSet = true
}

func (v NullableContactAttributeChangeNewValue) IsSet() bool {
	return v.isSet
}

func (v *NullableContactAttributeChangeNewValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactAttributeChangeNewValue(val *ContactAttributeChangeNewValue) *NullableContactAttributeChangeNewValue {
	return &NullableContactAttributeChangeNewValue{value: val, isSet: true}
}

func (v NullableContactAttributeChangeNewValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactAttributeChangeNewValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


