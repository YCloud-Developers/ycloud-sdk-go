/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"encoding/json"
	"fmt"
)

// UnsubscriberChannel Channel of unsubscriber. - `whatsapp`: Indicates that the customer opts out of receiving WhatsApp messages from your business.
type UnsubscriberChannel string

// List of UnsubscriberChannel
const (
	UNSUBSCRIBERCHANNEL_WHATSAPP UnsubscriberChannel = "whatsapp"
)

// All allowed values of UnsubscriberChannel enum
var AllowedUnsubscriberChannelEnumValues = []UnsubscriberChannel{
	"whatsapp",
}

func (v *UnsubscriberChannel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UnsubscriberChannel(value)
	*v = enumTypeValue
	return nil
}

// NewUnsubscriberChannelFromValue returns a pointer to a valid UnsubscriberChannel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUnsubscriberChannelFromValue(v string) (*UnsubscriberChannel, error) {
	ev := UnsubscriberChannel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UnsubscriberChannel: valid values are %v", v, AllowedUnsubscriberChannelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UnsubscriberChannel) IsValid() bool {
	for _, existing := range AllowedUnsubscriberChannelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UnsubscriberChannel value
func (v UnsubscriberChannel) Ptr() *UnsubscriberChannel {
	return &v
}

type NullableUnsubscriberChannel struct {
	value *UnsubscriberChannel
	isSet bool
}

func (v NullableUnsubscriberChannel) Get() *UnsubscriberChannel {
	return v.value
}

func (v *NullableUnsubscriberChannel) Set(val *UnsubscriberChannel) {
	v.value = val
	v.isSet = true
}

func (v NullableUnsubscriberChannel) IsSet() bool {
	return v.isSet
}

func (v *NullableUnsubscriberChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnsubscriberChannel(val *UnsubscriberChannel) *NullableUnsubscriberChannel {
	return &NullableUnsubscriberChannel{value: val, isSet: true}
}

func (v NullableUnsubscriberChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnsubscriberChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

