/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"encoding/json"
)

// WhatsappMessageInteractiveAction **Required.** Action you want the user to perform after reading the `interactive` message.
type WhatsappMessageInteractiveAction struct {
	// Required for Reply Buttons. You can have up to 3 buttons.
	Buttons []WhatsappMessageInteractiveActionButton `json:"buttons,omitempty"`
	// Required for List Messages. Button content. It cannot be an empty string and must be unique within the message. Emojis are supported, markdown is not. Maximum length: 20 characters.
	Button *string `json:"button,omitempty"`
	// Required for Single Product Messages and Multi-Product Messages. Unique identifier of the Facebook catalog linked to your WhatsApp Business Account. This ID can be retrieved via the [Meta Commerce Manager](https://business.facebook.com/commerce).
	CatalogId *string `json:"catalog_id,omitempty"`
	// Required for Single Product Messages and Multi-Product Messages. Unique identifier of the product in a catalog.
	ProductRetailerId *string `json:"product_retailer_id,omitempty"`
	// Required for List Messages and Multi-Product Messages. Array of section objects. Minimum of 1, maximum of 10.
	Sections []WhatsappMessageInteractiveActionSection `json:"sections,omitempty"`
	// Action name. Required for Call-To-Action (CTA) buttons. - `cta_url`: Use for Call-To-Action (CTA) URL buttons. - `send_location`: Use for Location Request buttons. - `flow`: Use for Flow buttons. - `review_and_pay`: Use for Order Details buttons. - `review_order`: Use for Order Status buttons.
	Name       *string                                     `json:"name,omitempty"`
	Parameters *WhatsappMessageInteractiveActionParameters `json:"parameters,omitempty"`
}

// NewWhatsappMessageInteractiveAction instantiates a new WhatsappMessageInteractiveAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWhatsappMessageInteractiveAction() *WhatsappMessageInteractiveAction {
	this := WhatsappMessageInteractiveAction{}
	return &this
}

// NewWhatsappMessageInteractiveActionWithDefaults instantiates a new WhatsappMessageInteractiveAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWhatsappMessageInteractiveActionWithDefaults() *WhatsappMessageInteractiveAction {
	this := WhatsappMessageInteractiveAction{}
	return &this
}

// GetButtons returns the Buttons field value if set, zero value otherwise.
func (o *WhatsappMessageInteractiveAction) GetButtons() []WhatsappMessageInteractiveActionButton {
	if o == nil || o.Buttons == nil {
		var ret []WhatsappMessageInteractiveActionButton
		return ret
	}
	return o.Buttons
}

// GetButtonsOk returns a tuple with the Buttons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsappMessageInteractiveAction) GetButtonsOk() ([]WhatsappMessageInteractiveActionButton, bool) {
	if o == nil || o.Buttons == nil {
		return nil, false
	}
	return o.Buttons, true
}

// HasButtons returns a boolean if a field has been set.
func (o *WhatsappMessageInteractiveAction) HasButtons() bool {
	if o != nil && o.Buttons != nil {
		return true
	}

	return false
}

// SetButtons gets a reference to the given []WhatsappMessageInteractiveActionButton and assigns it to the Buttons field.
func (o *WhatsappMessageInteractiveAction) SetButtons(v []WhatsappMessageInteractiveActionButton) {
	o.Buttons = v
}

// GetButton returns the Button field value if set, zero value otherwise.
func (o *WhatsappMessageInteractiveAction) GetButton() string {
	if o == nil || o.Button == nil {
		var ret string
		return ret
	}
	return *o.Button
}

// GetButtonOk returns a tuple with the Button field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsappMessageInteractiveAction) GetButtonOk() (*string, bool) {
	if o == nil || o.Button == nil {
		return nil, false
	}
	return o.Button, true
}

// HasButton returns a boolean if a field has been set.
func (o *WhatsappMessageInteractiveAction) HasButton() bool {
	if o != nil && o.Button != nil {
		return true
	}

	return false
}

// SetButton gets a reference to the given string and assigns it to the Button field.
func (o *WhatsappMessageInteractiveAction) SetButton(v string) {
	o.Button = &v
}

// GetCatalogId returns the CatalogId field value if set, zero value otherwise.
func (o *WhatsappMessageInteractiveAction) GetCatalogId() string {
	if o == nil || o.CatalogId == nil {
		var ret string
		return ret
	}
	return *o.CatalogId
}

// GetCatalogIdOk returns a tuple with the CatalogId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsappMessageInteractiveAction) GetCatalogIdOk() (*string, bool) {
	if o == nil || o.CatalogId == nil {
		return nil, false
	}
	return o.CatalogId, true
}

// HasCatalogId returns a boolean if a field has been set.
func (o *WhatsappMessageInteractiveAction) HasCatalogId() bool {
	if o != nil && o.CatalogId != nil {
		return true
	}

	return false
}

// SetCatalogId gets a reference to the given string and assigns it to the CatalogId field.
func (o *WhatsappMessageInteractiveAction) SetCatalogId(v string) {
	o.CatalogId = &v
}

// GetProductRetailerId returns the ProductRetailerId field value if set, zero value otherwise.
func (o *WhatsappMessageInteractiveAction) GetProductRetailerId() string {
	if o == nil || o.ProductRetailerId == nil {
		var ret string
		return ret
	}
	return *o.ProductRetailerId
}

// GetProductRetailerIdOk returns a tuple with the ProductRetailerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsappMessageInteractiveAction) GetProductRetailerIdOk() (*string, bool) {
	if o == nil || o.ProductRetailerId == nil {
		return nil, false
	}
	return o.ProductRetailerId, true
}

// HasProductRetailerId returns a boolean if a field has been set.
func (o *WhatsappMessageInteractiveAction) HasProductRetailerId() bool {
	if o != nil && o.ProductRetailerId != nil {
		return true
	}

	return false
}

// SetProductRetailerId gets a reference to the given string and assigns it to the ProductRetailerId field.
func (o *WhatsappMessageInteractiveAction) SetProductRetailerId(v string) {
	o.ProductRetailerId = &v
}

// GetSections returns the Sections field value if set, zero value otherwise.
func (o *WhatsappMessageInteractiveAction) GetSections() []WhatsappMessageInteractiveActionSection {
	if o == nil || o.Sections == nil {
		var ret []WhatsappMessageInteractiveActionSection
		return ret
	}
	return o.Sections
}

// GetSectionsOk returns a tuple with the Sections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsappMessageInteractiveAction) GetSectionsOk() ([]WhatsappMessageInteractiveActionSection, bool) {
	if o == nil || o.Sections == nil {
		return nil, false
	}
	return o.Sections, true
}

// HasSections returns a boolean if a field has been set.
func (o *WhatsappMessageInteractiveAction) HasSections() bool {
	if o != nil && o.Sections != nil {
		return true
	}

	return false
}

// SetSections gets a reference to the given []WhatsappMessageInteractiveActionSection and assigns it to the Sections field.
func (o *WhatsappMessageInteractiveAction) SetSections(v []WhatsappMessageInteractiveActionSection) {
	o.Sections = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WhatsappMessageInteractiveAction) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsappMessageInteractiveAction) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WhatsappMessageInteractiveAction) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WhatsappMessageInteractiveAction) SetName(v string) {
	o.Name = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *WhatsappMessageInteractiveAction) GetParameters() WhatsappMessageInteractiveActionParameters {
	if o == nil || o.Parameters == nil {
		var ret WhatsappMessageInteractiveActionParameters
		return ret
	}
	return *o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsappMessageInteractiveAction) GetParametersOk() (*WhatsappMessageInteractiveActionParameters, bool) {
	if o == nil || o.Parameters == nil {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *WhatsappMessageInteractiveAction) HasParameters() bool {
	if o != nil && o.Parameters != nil {
		return true
	}

	return false
}

// SetParameters gets a reference to the given WhatsappMessageInteractiveActionParameters and assigns it to the Parameters field.
func (o *WhatsappMessageInteractiveAction) SetParameters(v WhatsappMessageInteractiveActionParameters) {
	o.Parameters = &v
}

func (o WhatsappMessageInteractiveAction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Buttons != nil {
		toSerialize["buttons"] = o.Buttons
	}
	if o.Button != nil {
		toSerialize["button"] = o.Button
	}
	if o.CatalogId != nil {
		toSerialize["catalog_id"] = o.CatalogId
	}
	if o.ProductRetailerId != nil {
		toSerialize["product_retailer_id"] = o.ProductRetailerId
	}
	if o.Sections != nil {
		toSerialize["sections"] = o.Sections
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Parameters != nil {
		toSerialize["parameters"] = o.Parameters
	}
	return json.Marshal(toSerialize)
}

type NullableWhatsappMessageInteractiveAction struct {
	value *WhatsappMessageInteractiveAction
	isSet bool
}

func (v NullableWhatsappMessageInteractiveAction) Get() *WhatsappMessageInteractiveAction {
	return v.value
}

func (v *NullableWhatsappMessageInteractiveAction) Set(val *WhatsappMessageInteractiveAction) {
	v.value = val
	v.isSet = true
}

func (v NullableWhatsappMessageInteractiveAction) IsSet() bool {
	return v.isSet
}

func (v *NullableWhatsappMessageInteractiveAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWhatsappMessageInteractiveAction(val *WhatsappMessageInteractiveAction) *NullableWhatsappMessageInteractiveAction {
	return &NullableWhatsappMessageInteractiveAction{value: val, isSet: true}
}

func (v NullableWhatsappMessageInteractiveAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWhatsappMessageInteractiveAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
