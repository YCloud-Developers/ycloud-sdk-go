/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"encoding/json"
)

// ContactAttributeChange Represents a single attribute change, containing the old value, new value, and change actions.
type ContactAttributeChange struct {
	OldValue *ContactAttributeChangeOldValue `json:"oldValue,omitempty"`
	NewValue *ContactAttributeChangeNewValue `json:"newValue,omitempty"`
	// An array of change actions that describe what operations were performed on this attribute.
	Extra []AttributeChangeAction `json:"extra,omitempty"`
}

// NewContactAttributeChange instantiates a new ContactAttributeChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactAttributeChange() *ContactAttributeChange {
	this := ContactAttributeChange{}
	return &this
}

// NewContactAttributeChangeWithDefaults instantiates a new ContactAttributeChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactAttributeChangeWithDefaults() *ContactAttributeChange {
	this := ContactAttributeChange{}
	return &this
}

// GetOldValue returns the OldValue field value if set, zero value otherwise.
func (o *ContactAttributeChange) GetOldValue() ContactAttributeChangeOldValue {
	if o == nil || o.OldValue == nil {
		var ret ContactAttributeChangeOldValue
		return ret
	}
	return *o.OldValue
}

// GetOldValueOk returns a tuple with the OldValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactAttributeChange) GetOldValueOk() (*ContactAttributeChangeOldValue, bool) {
	if o == nil || o.OldValue == nil {
		return nil, false
	}
	return o.OldValue, true
}

// HasOldValue returns a boolean if a field has been set.
func (o *ContactAttributeChange) HasOldValue() bool {
	if o != nil && o.OldValue != nil {
		return true
	}

	return false
}

// SetOldValue gets a reference to the given ContactAttributeChangeOldValue and assigns it to the OldValue field.
func (o *ContactAttributeChange) SetOldValue(v ContactAttributeChangeOldValue) {
	o.OldValue = &v
}

// GetNewValue returns the NewValue field value if set, zero value otherwise.
func (o *ContactAttributeChange) GetNewValue() ContactAttributeChangeNewValue {
	if o == nil || o.NewValue == nil {
		var ret ContactAttributeChangeNewValue
		return ret
	}
	return *o.NewValue
}

// GetNewValueOk returns a tuple with the NewValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactAttributeChange) GetNewValueOk() (*ContactAttributeChangeNewValue, bool) {
	if o == nil || o.NewValue == nil {
		return nil, false
	}
	return o.NewValue, true
}

// HasNewValue returns a boolean if a field has been set.
func (o *ContactAttributeChange) HasNewValue() bool {
	if o != nil && o.NewValue != nil {
		return true
	}

	return false
}

// SetNewValue gets a reference to the given ContactAttributeChangeNewValue and assigns it to the NewValue field.
func (o *ContactAttributeChange) SetNewValue(v ContactAttributeChangeNewValue) {
	o.NewValue = &v
}

// GetExtra returns the Extra field value if set, zero value otherwise.
func (o *ContactAttributeChange) GetExtra() []AttributeChangeAction {
	if o == nil || o.Extra == nil {
		var ret []AttributeChangeAction
		return ret
	}
	return o.Extra
}

// GetExtraOk returns a tuple with the Extra field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactAttributeChange) GetExtraOk() ([]AttributeChangeAction, bool) {
	if o == nil || o.Extra == nil {
		return nil, false
	}
	return o.Extra, true
}

// HasExtra returns a boolean if a field has been set.
func (o *ContactAttributeChange) HasExtra() bool {
	if o != nil && o.Extra != nil {
		return true
	}

	return false
}

// SetExtra gets a reference to the given []AttributeChangeAction and assigns it to the Extra field.
func (o *ContactAttributeChange) SetExtra(v []AttributeChangeAction) {
	o.Extra = v
}

func (o ContactAttributeChange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OldValue != nil {
		toSerialize["oldValue"] = o.OldValue
	}
	if o.NewValue != nil {
		toSerialize["newValue"] = o.NewValue
	}
	if o.Extra != nil {
		toSerialize["extra"] = o.Extra
	}
	return json.Marshal(toSerialize)
}

type NullableContactAttributeChange struct {
	value *ContactAttributeChange
	isSet bool
}

func (v NullableContactAttributeChange) Get() *ContactAttributeChange {
	return v.value
}

func (v *NullableContactAttributeChange) Set(val *ContactAttributeChange) {
	v.value = val
	v.isSet = true
}

func (v NullableContactAttributeChange) IsSet() bool {
	return v.isSet
}

func (v *NullableContactAttributeChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactAttributeChange(val *ContactAttributeChange) *NullableContactAttributeChange {
	return &NullableContactAttributeChange{value: val, isSet: true}
}

func (v NullableContactAttributeChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactAttributeChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


