/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"encoding/json"
	"fmt"
)

// WhatsappMessageMedia - Use for `image`, `video`, `audio`, `document`, or `sticker` messages.  See also [Supported Media Types](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/media#supported-media-types).  **Note**: Either `id` or `link` must be provided, but not both. These parameters are mutually exclusive.  Reference: [WhatsApp Cloud API Media Object](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/messages#media-object)
type WhatsappMessageMedia struct {
	WhatsappMessageMediaOneOf *WhatsappMessageMediaOneOf
	WhatsappMessageMediaOneOf1 *WhatsappMessageMediaOneOf1
}

// WhatsappMessageMediaOneOfAsWhatsappMessageMedia is a convenience function that returns WhatsappMessageMediaOneOf wrapped in WhatsappMessageMedia
func WhatsappMessageMediaOneOfAsWhatsappMessageMedia(v *WhatsappMessageMediaOneOf) WhatsappMessageMedia {
	return WhatsappMessageMedia{
		WhatsappMessageMediaOneOf: v,
	}
}

// WhatsappMessageMediaOneOf1AsWhatsappMessageMedia is a convenience function that returns WhatsappMessageMediaOneOf1 wrapped in WhatsappMessageMedia
func WhatsappMessageMediaOneOf1AsWhatsappMessageMedia(v *WhatsappMessageMediaOneOf1) WhatsappMessageMedia {
	return WhatsappMessageMedia{
		WhatsappMessageMediaOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *WhatsappMessageMedia) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into WhatsappMessageMediaOneOf
	err = newStrictDecoder(data).Decode(&dst.WhatsappMessageMediaOneOf)
	if err == nil {
		jsonWhatsappMessageMediaOneOf, _ := json.Marshal(dst.WhatsappMessageMediaOneOf)
		if string(jsonWhatsappMessageMediaOneOf) == "{}" { // empty struct
			dst.WhatsappMessageMediaOneOf = nil
		} else {
			match++
		}
	} else {
		dst.WhatsappMessageMediaOneOf = nil
	}

	// try to unmarshal data into WhatsappMessageMediaOneOf1
	err = newStrictDecoder(data).Decode(&dst.WhatsappMessageMediaOneOf1)
	if err == nil {
		jsonWhatsappMessageMediaOneOf1, _ := json.Marshal(dst.WhatsappMessageMediaOneOf1)
		if string(jsonWhatsappMessageMediaOneOf1) == "{}" { // empty struct
			dst.WhatsappMessageMediaOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.WhatsappMessageMediaOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.WhatsappMessageMediaOneOf = nil
		dst.WhatsappMessageMediaOneOf1 = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(WhatsappMessageMedia)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(WhatsappMessageMedia)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src WhatsappMessageMedia) MarshalJSON() ([]byte, error) {
	if src.WhatsappMessageMediaOneOf != nil {
		return json.Marshal(&src.WhatsappMessageMediaOneOf)
	}

	if src.WhatsappMessageMediaOneOf1 != nil {
		return json.Marshal(&src.WhatsappMessageMediaOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *WhatsappMessageMedia) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.WhatsappMessageMediaOneOf != nil {
		return obj.WhatsappMessageMediaOneOf
	}

	if obj.WhatsappMessageMediaOneOf1 != nil {
		return obj.WhatsappMessageMediaOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableWhatsappMessageMedia struct {
	value *WhatsappMessageMedia
	isSet bool
}

func (v NullableWhatsappMessageMedia) Get() *WhatsappMessageMedia {
	return v.value
}

func (v *NullableWhatsappMessageMedia) Set(val *WhatsappMessageMedia) {
	v.value = val
	v.isSet = true
}

func (v NullableWhatsappMessageMedia) IsSet() bool {
	return v.isSet
}

func (v *NullableWhatsappMessageMedia) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWhatsappMessageMedia(val *WhatsappMessageMedia) *NullableWhatsappMessageMedia {
	return &NullableWhatsappMessageMedia{value: val, isSet: true}
}

func (v NullableWhatsappMessageMedia) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWhatsappMessageMedia) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


