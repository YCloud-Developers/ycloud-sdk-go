/*
YCloud API

The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

API version: v2
Contact: service@ycloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ycloud

import (
	"encoding/json"
	"time"
)

// WhatsappConversation WhatsApp defines a conversation as a 24-hour session of messaging between a person and a business. See also [Conversation-Based Pricing](https://developers.facebook.com/docs/whatsapp/pricing).
type WhatsappConversation struct {
	// Unique ID for the object.
	Id *string `json:"id,omitempty"`
	Type *WhatsappConversationType `json:"type,omitempty"`
	OriginType *WhatsappConversationOriginType `json:"originType,omitempty"`
	// Date when the conversation expires, formatted in [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339). e.g., `2022-06-01T12:00:00.000Z`.
	ExpireTime *time.Time `json:"expireTime,omitempty"`
}

// NewWhatsappConversation instantiates a new WhatsappConversation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWhatsappConversation() *WhatsappConversation {
	this := WhatsappConversation{}
	return &this
}

// NewWhatsappConversationWithDefaults instantiates a new WhatsappConversation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWhatsappConversationWithDefaults() *WhatsappConversation {
	this := WhatsappConversation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WhatsappConversation) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsappConversation) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WhatsappConversation) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WhatsappConversation) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *WhatsappConversation) GetType() WhatsappConversationType {
	if o == nil || o.Type == nil {
		var ret WhatsappConversationType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsappConversation) GetTypeOk() (*WhatsappConversationType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *WhatsappConversation) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given WhatsappConversationType and assigns it to the Type field.
func (o *WhatsappConversation) SetType(v WhatsappConversationType) {
	o.Type = &v
}

// GetOriginType returns the OriginType field value if set, zero value otherwise.
func (o *WhatsappConversation) GetOriginType() WhatsappConversationOriginType {
	if o == nil || o.OriginType == nil {
		var ret WhatsappConversationOriginType
		return ret
	}
	return *o.OriginType
}

// GetOriginTypeOk returns a tuple with the OriginType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsappConversation) GetOriginTypeOk() (*WhatsappConversationOriginType, bool) {
	if o == nil || o.OriginType == nil {
		return nil, false
	}
	return o.OriginType, true
}

// HasOriginType returns a boolean if a field has been set.
func (o *WhatsappConversation) HasOriginType() bool {
	if o != nil && o.OriginType != nil {
		return true
	}

	return false
}

// SetOriginType gets a reference to the given WhatsappConversationOriginType and assigns it to the OriginType field.
func (o *WhatsappConversation) SetOriginType(v WhatsappConversationOriginType) {
	o.OriginType = &v
}

// GetExpireTime returns the ExpireTime field value if set, zero value otherwise.
func (o *WhatsappConversation) GetExpireTime() time.Time {
	if o == nil || o.ExpireTime == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpireTime
}

// GetExpireTimeOk returns a tuple with the ExpireTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsappConversation) GetExpireTimeOk() (*time.Time, bool) {
	if o == nil || o.ExpireTime == nil {
		return nil, false
	}
	return o.ExpireTime, true
}

// HasExpireTime returns a boolean if a field has been set.
func (o *WhatsappConversation) HasExpireTime() bool {
	if o != nil && o.ExpireTime != nil {
		return true
	}

	return false
}

// SetExpireTime gets a reference to the given time.Time and assigns it to the ExpireTime field.
func (o *WhatsappConversation) SetExpireTime(v time.Time) {
	o.ExpireTime = &v
}

func (o WhatsappConversation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.OriginType != nil {
		toSerialize["originType"] = o.OriginType
	}
	if o.ExpireTime != nil {
		toSerialize["expireTime"] = o.ExpireTime
	}
	return json.Marshal(toSerialize)
}

type NullableWhatsappConversation struct {
	value *WhatsappConversation
	isSet bool
}

func (v NullableWhatsappConversation) Get() *WhatsappConversation {
	return v.value
}

func (v *NullableWhatsappConversation) Set(val *WhatsappConversation) {
	v.value = val
	v.isSet = true
}

func (v NullableWhatsappConversation) IsSet() bool {
	return v.isSet
}

func (v *NullableWhatsappConversation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWhatsappConversation(val *WhatsappConversation) *NullableWhatsappConversation {
	return &NullableWhatsappConversation{value: val, isSet: true}
}

func (v NullableWhatsappConversation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWhatsappConversation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


